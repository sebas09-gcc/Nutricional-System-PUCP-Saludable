-- MySQL Script generated by MySQL Workbench
-- Tue Nov 30 20:21:59 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema pucpsaludable
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `pucpsaludable` ;

-- -----------------------------------------------------
-- Schema pucpsaludable
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pucpsaludable` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `pucpsaludable` ;

-- -----------------------------------------------------
-- Table `pucpsaludable`.`facultad`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`facultad` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`facultad` (
  `id_facultad` INT NOT NULL AUTO_INCREMENT,
  `nombreFacultad` VARCHAR(100) NOT NULL,
  `descripcionFacultad` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id_facultad`))
ENGINE = InnoDB
AUTO_INCREMENT = 16
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`especialidad`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`especialidad` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`especialidad` (
  `id_especialidad` INT NOT NULL AUTO_INCREMENT,
  `fid_facultad` INT NOT NULL,
  `nombreEspecialidad` VARCHAR(100) NOT NULL,
  `descripcionEspecialidad` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id_especialidad`, `fid_facultad`),
  INDEX `fk_especialidad_facultad1_idx` (`fid_facultad` ASC) VISIBLE,
  CONSTRAINT `fk_especialidad_facultad1`
    FOREIGN KEY (`fid_facultad`)
    REFERENCES `pucpsaludable`.`facultad` (`id_facultad`))
ENGINE = InnoDB
AUTO_INCREMENT = 57
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`alumno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`alumno` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`alumno` (
  `id_alumno` INT NOT NULL,
  `fid_especialidad` INT NOT NULL,
  `creditosAprobados` DOUBLE NULL DEFAULT '0',
  `matriculado` TINYINT NOT NULL DEFAULT '1',
  `nombreContacto` VARCHAR(45) NULL DEFAULT NULL,
  `parentezcoContacto` VARCHAR(45) NULL DEFAULT NULL,
  `numContacto` VARCHAR(9) NULL DEFAULT NULL,
  PRIMARY KEY (`id_alumno`),
  INDEX `fk_Alumno_Usuario1_idx` (`id_alumno` ASC) VISIBLE,
  INDEX `fk_alumno_especialidad1_idx` (`fid_especialidad` ASC) VISIBLE,
  CONSTRAINT `fk_alumno_especialidad1`
    FOREIGN KEY (`fid_especialidad`)
    REFERENCES `pucpsaludable`.`especialidad` (`id_especialidad`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`ingrediente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`ingrediente` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`ingrediente` (
  `id_ingrediente` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(80) NOT NULL,
  `unidad` VARCHAR(10) NOT NULL COMMENT 'kg, g, l,...',
  `cantidad` DOUBLE NOT NULL COMMENT 'Cantidad patrón. En base a esto y el número de calorías se calculan las proporciones de ingredientes en los presets.',
  `kcal` DOUBLE NOT NULL,
  `grasasSaturadas` TINYINT NULL DEFAULT '0',
  `azucar` TINYINT NULL DEFAULT '0',
  `sodio` TINYINT NULL DEFAULT '0',
  `grasasTrans` TINYINT NULL DEFAULT '0',
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_ingrediente`),
  UNIQUE INDEX `id_UNIQUE` (`id_ingrediente` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 683
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`alimento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`alimento` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`alimento` (
  `fid_alumno` INT NOT NULL,
  `fid_ingrediente` INT UNSIGNED NOT NULL,
  `preferencia` TINYINT NOT NULL COMMENT '0=nopreferido//1=preferido//2=alergia',
  PRIMARY KEY (`fid_alumno`, `fid_ingrediente`),
  INDEX `fk_ingrediente_idx` (`fid_ingrediente` ASC) VISIBLE,
  CONSTRAINT `fk_alumno`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`),
  CONSTRAINT `fk_ingrediente`
    FOREIGN KEY (`fid_ingrediente`)
    REFERENCES `pucpsaludable`.`ingrediente` (`id_ingrediente`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`tipodeporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`tipodeporte` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`tipodeporte` (
  `id_tipoDeporte` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(40) NOT NULL COMMENT 'Deporte de equipo, deporte de balón, deporte acuático, deporte de montaña, deporte de aventura, deporte de fuerza, deporte extremo, deporte de tiro,...',
  `descripcion` TINYTEXT NULL DEFAULT NULL COMMENT 'Descripción del tipo de deporte y sus beneficios.',
  `estado` TINYINT NOT NULL,
  PRIMARY KEY (`id_tipoDeporte`),
  UNIQUE INDEX `id_UNIQUE` (`id_tipoDeporte` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`deporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`deporte` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`deporte` (
  `id_deporte` INT NOT NULL AUTO_INCREMENT,
  `fid_tipoDeporte` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `nombre` VARCHAR(40) NOT NULL,
  `estado` TINYINT NOT NULL,
  PRIMARY KEY (`id_deporte`, `fid_tipoDeporte`),
  UNIQUE INDEX `id_UNIQUE` (`id_deporte` ASC) VISIBLE,
  INDEX `fk_Deporte_TipoDeporte1_idx` (`fid_tipoDeporte` ASC) VISIBLE,
  CONSTRAINT `fk_Deporte_TipoDeporte1`
    FOREIGN KEY (`fid_tipoDeporte`)
    REFERENCES `pucpsaludable`.`tipodeporte` (`id_tipoDeporte`))
ENGINE = InnoDB
AUTO_INCREMENT = 20
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`taller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`taller` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`taller` (
  `id_taller` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fid_deporte` INT NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `fechaInicio` DATE NOT NULL,
  `fechaFin` DATE NULL DEFAULT NULL,
  `lugar` VARCHAR(100) NOT NULL COMMENT 'Ubicación física o virtual donde se dictará un taller.',
  `capacidad` INT NOT NULL,
  `estado` TINYINT NOT NULL,
  PRIMARY KEY (`id_taller`, `fid_deporte`),
  INDEX `fk_Taller_Deporte1_idx` (`fid_deporte` ASC) VISIBLE,
  CONSTRAINT `fk_Taller_Deporte1`
    FOREIGN KEY (`fid_deporte`)
    REFERENCES `pucpsaludable`.`deporte` (`id_deporte`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`alumno_has_taller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`alumno_has_taller` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`alumno_has_taller` (
  `id_alumnoHasTaller` INT NOT NULL,
  `fid_alumno` INT NOT NULL,
  `fid_taller` INT(10) UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (`id_alumnoHasTaller`),
  INDEX `fk_alumno_has_taller_taller1_idx` (`fid_taller` ASC) VISIBLE,
  INDEX `fk_alumno_has_taller_alumno1_idx` (`fid_alumno` ASC) VISIBLE,
  CONSTRAINT `fk_alumno_has_taller_alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`),
  CONSTRAINT `fk_alumno_has_taller_taller1`
    FOREIGN KEY (`fid_taller`)
    REFERENCES `pucpsaludable`.`taller` (`id_taller`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`especialista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`especialista` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`especialista` (
  `id_especialista` INT NOT NULL,
  `biografia` TINYTEXT NULL DEFAULT NULL COMMENT 'Biografía del psicólogo, nutricionista o entrenador.',
  `telefonoLaboral` VARCHAR(9) NULL DEFAULT NULL,
  `direccionLaboral` VARCHAR(100) NULL DEFAULT 'Servicio de salud#-12.0697563091693#-77.0794320013283',
  `URLVideoInformativo` VARCHAR(256) NULL DEFAULT NULL,
  `tituloMensaje` TINYTEXT NULL DEFAULT NULL,
  `mensajeMensaje` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id_especialista`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`especialistasalud`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`especialistasalud` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`especialistasalud` (
  `id_especialistaSalud` INT NOT NULL,
  `colegiatura` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_especialistaSalud`),
  CONSTRAINT `fk_especialistaSalud_especialista1`
    FOREIGN KEY (`id_especialistaSalud`)
    REFERENCES `pucpsaludable`.`especialista` (`id_especialista`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`cita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`cita` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`cita` (
  `id_cita` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fid_alumno` INT NOT NULL,
  `fid_especialistaSalud` INT NOT NULL,
  `estado` TINYINT NULL DEFAULT '0' COMMENT '0: programada, pero aún no atendida\\n1: atendida\\n2: cancelada\\n3: no atendida y expirada (faltó)\\n',
  `fechaHoraRegistro` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fechaHoraAtencion` DATETIME NOT NULL,
  `diagnostico` MEDIUMTEXT NULL DEFAULT NULL,
  `referencia` VARCHAR(6) NULL DEFAULT NULL COMMENT 'Código alfanumérico que permite a un pisicólogo realizar un seguimiento de citas relacionadas.',
  `atencion` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_cita`),
  UNIQUE INDEX `id_UNIQUE` (`id_cita` ASC) VISIBLE,
  INDEX `fk_Cita_Alumno1_idx` (`fid_alumno` ASC) VISIBLE,
  INDEX `fk_cita_especialistaSalud1_idx` (`fid_especialistaSalud` ASC) VISIBLE,
  CONSTRAINT `fk_Cita_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`),
  CONSTRAINT `fk_cita_especialistaSalud1`
    FOREIGN KEY (`fid_especialistaSalud`)
    REFERENCES `pucpsaludable`.`especialistasalud` (`id_especialistaSalud`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`constancia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`constancia` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`constancia` (
  `fid_alumno` INT NOT NULL,
  `fechaHoraRegistro` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `archivoConstancia` BLOB NOT NULL,
  `estado` TINYINT NOT NULL DEFAULT '0' COMMENT '0: estado inicial\\n1: aprobada\\n2: rechazada',
  PRIMARY KEY (`fid_alumno`),
  CONSTRAINT `fk_constancia_alumno`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`cumplimientorutina`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`cumplimientorutina` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`cumplimientorutina` (
  `id_cumplimientoRutina` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fid_alumno` INT NOT NULL,
  `Taller_id` INT NULL DEFAULT NULL,
  `fecha` DATETIME NOT NULL,
  `cumplio` TINYINT NOT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `tipoRutina` TINYINT NOT NULL DEFAULT '0' COMMENT '0: alimentaria\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: deportiva\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: alimentaria',
  `tipoComida` TINYINT NULL DEFAULT NULL COMMENT '0: desayuno\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: media mañana\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n2: comida\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n3: merienda\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n4: cena',
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_cumplimientoRutina`, `fid_alumno`),
  UNIQUE INDEX `id_UNIQUE` (`id_cumplimientoRutina` ASC) VISIBLE,
  INDEX `fk_CumplimientoRutina_Alumno_idx` (`fid_alumno` ASC) VISIBLE,
  CONSTRAINT `fk_CumplimientoRutina_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`entrenador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`entrenador` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`entrenador` (
  `id_entrenador` INT NOT NULL,
  `fid_deporte` INT NOT NULL,
  PRIMARY KEY (`id_entrenador`),
  INDEX `fk_entrenador_deporte1_idx` (`fid_deporte` ASC) VISIBLE,
  CONSTRAINT `fk_entrenador_deporte1`
    FOREIGN KEY (`fid_deporte`)
    REFERENCES `pucpsaludable`.`deporte` (`id_deporte`),
  CONSTRAINT `fk_entrenador_especialista1`
    FOREIGN KEY (`id_entrenador`)
    REFERENCES `pucpsaludable`.`especialista` (`id_especialista`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`especialista_has_taller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`especialista_has_taller` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`especialista_has_taller` (
  `id_especialistaHasTaller` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_taller` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_entrenador` INT NOT NULL,
  `estado` TINYINT NOT NULL,
  PRIMARY KEY (`id_especialistaHasTaller`),
  INDEX `fk_especialista_has_Taller_taller1_idx` (`fid_taller` ASC) VISIBLE,
  INDEX `fk_especialista_has_Taller_entrenador1_idx` (`fid_entrenador` ASC) VISIBLE,
  CONSTRAINT `fk_especialista_has_Taller_entrenador1`
    FOREIGN KEY (`fid_entrenador`)
    REFERENCES `pucpsaludable`.`entrenador` (`id_entrenador`),
  CONSTRAINT `fk_especialista_has_Taller_taller1`
    FOREIGN KEY (`fid_taller`)
    REFERENCES `pucpsaludable`.`taller` (`id_taller`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`horario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`horario` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`horario` (
  `id_horario` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fid_especialistaSalud` INT NULL DEFAULT NULL,
  `horaInicio` TIME NOT NULL,
  `horaFin` TIME NOT NULL,
  `diaSemana` TINYINT NOT NULL COMMENT '0 dom 1 lun 2 mar 3 mie 4 jue 5 vie 6 sab',
  `fechaHoraRegistro` DATETIME NOT NULL,
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_horario`),
  UNIQUE INDEX `id_UNIQUE` (`id_horario` ASC) VISIBLE,
  INDEX `fk_horario_especialistaSalud1_idx` (`fid_especialistaSalud` ASC) VISIBLE,
  CONSTRAINT `fk_horario_especialistaSalud1`
    FOREIGN KEY (`fid_especialistaSalud`)
    REFERENCES `pucpsaludable`.`especialistasalud` (`id_especialistaSalud`))
ENGINE = InnoDB
AUTO_INCREMENT = 99
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`horariohabitual`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`horariohabitual` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`horariohabitual` (
  `fid_alumno` INT NOT NULL,
  `despertarse` TIME NULL DEFAULT NULL COMMENT 'Hora de levantarse',
  `acostarse` TIME NULL DEFAULT NULL COMMENT 'Hora de acostarse',
  `desayuno` TIME NULL DEFAULT NULL COMMENT 'Hora de desayuno',
  `mediaManana` TIME NULL DEFAULT NULL COMMENT 'Hora de media mañana, de ser el caso',
  `comida` TIME NULL DEFAULT NULL COMMENT 'Hora de comida',
  `merienda` TIME NULL DEFAULT NULL COMMENT 'Hora de merienda, de ser el caso',
  `cena` TIME NULL DEFAULT NULL COMMENT 'Hora de cena',
  PRIMARY KEY (`fid_alumno`),
  CONSTRAINT `fk_HorarioHabitual_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`horassueno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`horassueno` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`horassueno` (
  `id_horas_sueno` INT NOT NULL AUTO_INCREMENT,
  `fid_alumno` INT NOT NULL,
  `fecha` DATE NOT NULL,
  `horas` DOUBLE NOT NULL COMMENT 'Número de horas que durmió un alumno en una fecha determinada.',
  `estado` TINYINT NOT NULL,
  PRIMARY KEY (`id_horas_sueno`),
  INDEX `fk_HorasSueno_Alumno1` (`fid_alumno` ASC) VISIBLE,
  CONSTRAINT `fk_HorasSueno_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`indicadorantropometrico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`indicadorantropometrico` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`indicadorantropometrico` (
  `id_indicador_antropometrico` INT NOT NULL AUTO_INCREMENT,
  `fid_alumno` INT NOT NULL,
  `fecha_registro` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `peso_actual` DOUBLE NOT NULL COMMENT 'En kilogramos.',
  `estatura` DOUBLE NOT NULL COMMENT 'En centímetros.',
  `circunferencia_brazo` DOUBLE NULL DEFAULT NULL COMMENT 'En centímetros.',
  `circunferencia_cintura` DOUBLE NULL DEFAULT NULL COMMENT 'En centímetros.',
  `circunferencia_cadera` DOUBLE NULL DEFAULT NULL COMMENT 'En centímetros.',
  `circunferencia_abdominal` DOUBLE NULL DEFAULT NULL COMMENT 'En centímetros.',
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_indicador_antropometrico`),
  INDEX `fk_IndicadorAntropometrico_Alumno1` (`fid_alumno` ASC) VISIBLE,
  CONSTRAINT `fk_IndicadorAntropometrico_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`indicadorsalud`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`indicadorsalud` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`indicadorsalud` (
  `fid_alumno` INT NOT NULL,
  `cafe` TINYINT NULL DEFAULT '0',
  `alcohol` TINYINT NULL DEFAULT '0',
  `tabaco` TINYINT NULL DEFAULT '0',
  `laxantes` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `diureticos` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `antiacidos` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `analgesicos` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `anticonceptivosOrales` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `terapiaHormonal` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `diarrea` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `celiaquia` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `estrenimiento` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `gastritis` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `ulcera` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `nausea` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `pirosis` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `vomito` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `colitis` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `dentadura` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `sensibilidadDental` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `embarazo` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `climaterio` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `cirugiasPrevias` TINYTEXT NULL DEFAULT NULL COMMENT 'Detalle de cirigías previas del alumno.',
  `aFObesidad` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `aFDiabetes` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `aFHTA` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `aFCancer` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `aFHipercolesterolemia` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `aFHipertrigliceridemia` TINYINT NULL DEFAULT '0' COMMENT '0: no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: sí\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nValor por defecto: no',
  `alergiasMed` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`fid_alumno`),
  CONSTRAINT `fk_IndicadorSalud_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`nutricionista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`nutricionista` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`nutricionista` (
  `id_nutricionista` INT NOT NULL,
  PRIMARY KEY (`id_nutricionista`),
  CONSTRAINT `fk_nutricionista_especialistaSalud1`
    FOREIGN KEY (`id_nutricionista`)
    REFERENCES `pucpsaludable`.`especialistasalud` (`id_especialistaSalud`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`presetreceta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`presetreceta` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`presetreceta` (
  `id_presetReceta` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL COMMENT 'hipocalórico, estándar, hipercalórico,...',
  `kcalTotales` DOUBLE NULL DEFAULT '0',
  `estado` TINYINT NOT NULL DEFAULT '1',
  `tipo` TINYINT NOT NULL COMMENT '0 estandar, 1 hipercalorico, 2 hipocalorico',
  PRIMARY KEY (`id_presetReceta`),
  UNIQUE INDEX `id_UNIQUE` (`id_presetReceta` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 106
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`planalimentario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`planalimentario` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`planalimentario` (
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fid_alumno` INT NOT NULL,
  `fid_presetReceta` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_nutricionista` INT NOT NULL,
  `tipoComida` TINYINT NOT NULL COMMENT '0: desayunon1: media mañanan2: comidan3: merienda\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' /* comment truncated */ /*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n4: cena*/,
  `dia` TINYINT NOT NULL,
  `estado` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`fecha`, `fid_alumno`, `fid_presetReceta`, `dia`),
  INDEX `fk_Alumno_has_PresetReceta_PresetReceta1_idx` (`fid_presetReceta` ASC) VISIBLE,
  INDEX `fk_Alumno_has_PresetReceta_Alumno_idx` (`fid_alumno` ASC) VISIBLE,
  INDEX `fk_planAlimentario_nutricionista1_idx` (`fid_nutricionista` ASC) VISIBLE,
  CONSTRAINT `fk_Alumno_has_PresetReceta_Alumno1`
    FOREIGN KEY (`fid_alumno`)
    REFERENCES `pucpsaludable`.`alumno` (`id_alumno`),
  CONSTRAINT `fk_Alumno_has_PresetReceta_PresetReceta1`
    FOREIGN KEY (`fid_presetReceta`)
    REFERENCES `pucpsaludable`.`presetreceta` (`id_presetReceta`),
  CONSTRAINT `fk_planAlimentario_nutricionista1`
    FOREIGN KEY (`fid_nutricionista`)
    REFERENCES `pucpsaludable`.`nutricionista` (`id_nutricionista`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`presetreceta_has_ingrediente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`presetreceta_has_ingrediente` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`presetreceta_has_ingrediente` (
  `id_presetRecetaHasIngrediente` INT NOT NULL AUTO_INCREMENT,
  `fid_presetReceta` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_ingrediente` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `kcal` DOUBLE NOT NULL,
  `cantidad` DOUBLE NOT NULL,
  `detalle` VARCHAR(200) NULL DEFAULT NULL,
  PRIMARY KEY (`id_presetRecetaHasIngrediente`),
  INDEX `fk_PresetReceta_has_Ingrediente_Ingrediente1_idx` (`fid_ingrediente` ASC) VISIBLE,
  INDEX `fk_PresetReceta_has_Ingrediente_PresetReceta1_idx` (`fid_presetReceta` ASC) VISIBLE,
  CONSTRAINT `fk_PresetReceta_has_Ingrediente_Ingrediente1`
    FOREIGN KEY (`fid_ingrediente`)
    REFERENCES `pucpsaludable`.`ingrediente` (`id_ingrediente`),
  CONSTRAINT `fk_PresetReceta_has_Ingrediente_PresetReceta1`
    FOREIGN KEY (`fid_presetReceta`)
    REFERENCES `pucpsaludable`.`presetreceta` (`id_presetReceta`))
ENGINE = InnoDB
AUTO_INCREMENT = 607
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`psicologo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`psicologo` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`psicologo` (
  `id_psicologo` INT NOT NULL,
  PRIMARY KEY (`id_psicologo`),
  CONSTRAINT `fk_psicologo_especialistaSalud1`
    FOREIGN KEY (`id_psicologo`)
    REFERENCES `pucpsaludable`.`especialistasalud` (`id_especialistaSalud`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`receta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`receta` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`receta` (
  `id_receta` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(40) NOT NULL COMMENT 'Nombre de la receta',
  `descripcion` MEDIUMTEXT NULL DEFAULT NULL COMMENT 'Descripción de la receta',
  `indicaciones` MEDIUMTEXT NOT NULL COMMENT 'Descripción de la preparación de la receta',
  `tipo` TINYINT NOT NULL COMMENT '0: desayuno\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: media mañana\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n2: comida\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n3: merienda\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n4: cena',
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_receta`))
ENGINE = InnoDB
AUTO_INCREMENT = 36
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`receta_has_presetreceta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`receta_has_presetreceta` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`receta_has_presetreceta` (
  `id_recetaHasPresetReceta` INT NOT NULL AUTO_INCREMENT,
  `fid_receta` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_presetReceta` INT(10) UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (`id_recetaHasPresetReceta`),
  INDEX `fk_Receta_has_PresetReceta_PresetReceta1_idx` (`fid_presetReceta` ASC) VISIBLE,
  INDEX `fk_Receta_has_PresetReceta_Receta1_idx` (`fid_receta` ASC) VISIBLE,
  CONSTRAINT `fk_Receta_has_PresetReceta_PresetReceta1`
    FOREIGN KEY (`fid_presetReceta`)
    REFERENCES `pucpsaludable`.`presetreceta` (`id_presetReceta`),
  CONSTRAINT `fk_Receta_has_PresetReceta_Receta1`
    FOREIGN KEY (`fid_receta`)
    REFERENCES `pucpsaludable`.`receta` (`id_receta`))
ENGINE = InnoDB
AUTO_INCREMENT = 106
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`regla`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`regla` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`regla` (
  `id_regla` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(40) NOT NULL,
  `clave` INT NOT NULL,
  `tipo` INT NOT NULL,
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_regla`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`rol`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`rol` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`rol` (
  `id_rol` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(40) NULL DEFAULT NULL,
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_rol`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`rol_has_regla`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`rol_has_regla` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`rol_has_regla` (
  `fid_rol` INT NOT NULL,
  `fid_regla` INT NOT NULL,
  `estado` TINYINT NOT NULL DEFAULT '1',
  PRIMARY KEY (`fid_rol`, `fid_regla`),
  INDEX `fk_rol_has_regla_regla1_idx` (`fid_regla` ASC) VISIBLE,
  INDEX `fk_rol_has_regla_rol1_idx` (`fid_rol` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`usuario` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`usuario` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT COMMENT 'Código unico que identifica a un usuario.',
  `codigoPUCP` VARCHAR(8) NOT NULL,
  `contrasena` VARCHAR(256) NOT NULL,
  `nombres` VARCHAR(40) NOT NULL,
  `apellidos` VARCHAR(40) NOT NULL,
  `emailPUCP` VARCHAR(256) NOT NULL COMMENT 'Puede usarse como username. Se puede usar para el restablecimiento de contraseña.',
  `emailPersonal` VARCHAR(256) NULL DEFAULT NULL COMMENT 'Es opcional. Puede usarse como username. NO se puede usar para el restablecimiento de contraseña.',
  `telefonoMovil` VARCHAR(9) NULL DEFAULT NULL COMMENT 'NO se puede usar para el restablecimiento de contraseña.',
  `fechaNacimiento` DATE NOT NULL,
  `fotoSrc` LONGBLOB NULL DEFAULT NULL COMMENT 'Foto de perfil de un usuario como objeto binario.',
  `sexo` CHAR(1) NULL DEFAULT NULL COMMENT 'M: masculino\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nF: femenino\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nI: intersexual',
  `estado` TINYINT NOT NULL DEFAULT '1' COMMENT '0: inactivo\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: activo\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nPor defecto: activo',
  `fid_rol` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_usuario`, `fid_rol`),
  UNIQUE INDEX `codigoPUCP_UNIQUE` (`id_usuario` ASC) VISIBLE,
  INDEX `fk_usuario_rol1_idx` (`fid_rol` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`sesionactiva`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`sesionactiva` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`sesionactiva` (
  `id_sesionActiva` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fid_usuario` INT NOT NULL,
  `descripcion` VARCHAR(120) NULL DEFAULT NULL COMMENT 'Plataforma, IP,...',
  `fechaHoraInicio` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha y hora en que se estableció la sesión',
  `valida` TINYINT NOT NULL DEFAULT '1' COMMENT '0: no válida\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1: válida',
  PRIMARY KEY (`id_sesionActiva`),
  UNIQUE INDEX `id_UNIQUE` (`id_sesionActiva` ASC) VISIBLE,
  INDEX `fk_SesionActiva_Usuario1_idx` (`fid_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_SesionActiva_Usuario1`
    FOREIGN KEY (`fid_usuario`)
    REFERENCES `pucpsaludable`.`usuario` (`id_usuario`))
ENGINE = InnoDB
AUTO_INCREMENT = 52
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`taller_has_horario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`taller_has_horario` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`taller_has_horario` (
  `id_tallerHasHorario` VARCHAR(45) NOT NULL,
  `fid_taller` INT(10) UNSIGNED ZEROFILL NOT NULL,
  `fid_horario` INT(10) UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (`id_tallerHasHorario`),
  INDEX `fk_Taller_has_Horario_Horario1_idx` (`fid_horario` ASC) VISIBLE,
  INDEX `fk_Taller_has_Horario_Taller1_idx` (`fid_taller` ASC) VISIBLE,
  CONSTRAINT `fk_Taller_has_Horario_Horario1`
    FOREIGN KEY (`fid_horario`)
    REFERENCES `pucpsaludable`.`horario` (`id_horario`),
  CONSTRAINT `fk_Taller_has_Horario_Taller1`
    FOREIGN KEY (`fid_taller`)
    REFERENCES `pucpsaludable`.`taller` (`id_taller`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `pucpsaludable`.`token`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pucpsaludable`.`token` ;

CREATE TABLE IF NOT EXISTS `pucpsaludable`.`token` (
  `id_token` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `codigo` VARCHAR(8) NOT NULL,
  `fechaHora` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `valido` TINYINT NOT NULL DEFAULT '1' COMMENT '0: token expiradon1: token válido',
  PRIMARY KEY (`id_token`),
  UNIQUE INDEX `id_UNIQUE` (`id_token` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `pucpsaludable` ;

-- -----------------------------------------------------
-- procedure ADQUIRIR_ALIMENTO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ADQUIRIR_ALIMENTO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ADQUIRIR_ALIMENTO`(
	IN _fid_alumno INT,
    IN _fid_ingrediente INT
)
BEGIN
	SELECT * FROM alimento
    WHERE fid_alumno = _fid_alumno AND fid_ingrediente = _fid_ingrediente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AGREGAR_ALIMENTO_A_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`AGREGAR_ALIMENTO_A_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `AGREGAR_ALIMENTO_A_ALUMNO`(
	IN _fid_alumno INT,
    IN _fid_ingrediente INT,
    IN _preferencia TINYINT
)
BEGIN
	INSERT INTO alimento(fid_alumno,fid_ingrediente,preferencia) VALUES(_fid_alumno,_fid_ingrediente,_preferencia);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AGREGAR_TEXTO_A_ESPECIALISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`AGREGAR_TEXTO_A_ESPECIALISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `AGREGAR_TEXTO_A_ESPECIALISTA`(
	IN _id_especialista INT,
    IN _tituloMensaje TINYTEXT,
    IN _mensajeMensaje TEXT
)
BEGIN
	UPDATE especialista
    SET tituloMensaje=_tituloMensaje,
    mensajeMensaje = _mensajeMensaje
    WHERE id_especialista=_id_especialista;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AGREGAR_VIDEO_A_ESPECIALISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`AGREGAR_VIDEO_A_ESPECIALISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `AGREGAR_VIDEO_A_ESPECIALISTA`(
	IN _id_especialista INT,
    IN _URLVideoInformativo VARCHAR(256)
)
BEGIN
	UPDATE especialista
    SET URLVideoInformativo=_URLVideoInformativo
    WHERE id_especialista=_id_especialista;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ATENDER_CITA_X_ALUMNO_O_ESPECIALISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ATENDER_CITA_X_ALUMNO_O_ESPECIALISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ATENDER_CITA_X_ALUMNO_O_ESPECIALISTA`(
	IN _id_cita INT,
    IN _fid_alumno INT,
    IN _fid_especialistaSalud INT
)
BEGIN
	-- NOTA, Si solo es el alumno se pone su id y en esp un -1
	UPDATE cita
    SET estado = 1 -- atendida
    WHERE id_cita=_id_cita and (fid_alumno=_fid_alumno or fid_especialistaSalud=_fid_especialistaSalud);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure BUSCAR_RECETA_X_ID_PRESET_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`BUSCAR_RECETA_X_ID_PRESET_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `BUSCAR_RECETA_X_ID_PRESET_RECETA`(
	IN _id_Preset_Receta INT
)
BEGIN
	select p.id_receta,p.nombre,p.descripcion,p.indicaciones,p.tipo,p.estado from receta p
	INNER JOIN receta_has_presetreceta i ON i.fid_receta=p.id_receta  where i.fid_presetReceta=_id_Preset_Receta;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CALCULAR_CALORIAS_PRESET_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CALCULAR_CALORIAS_PRESET_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CALCULAR_CALORIAS_PRESET_RECETA`(
IN _id_presetReceta INT)
BEGIN

DECLARE done INT DEFAULT FALSE;
DECLARE _TotalKcal DOUBLE;
DECLARE _kcal_alimento DOUBLE;
DECLARE CIngredientes CURSOR FOR SELECT kcal FROM presetreceta_has_ingrediente WHERE fid_presetReceta=_id_presetReceta;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

set _TotalKcal = 0;
open CIngredientes;
    read_loop: loop 
        fetch CIngredientes into _kcal_alimento;
        IF done THEN
			LEAVE read_loop;
		END IF;
        SET _TotalKcal = _TotalKcal + _kcal_alimento;
        
    end loop;
    close CIngredientes;

UPDATE presetreceta
SET kcalTotales=_TotalKcal
WHERE id_presetReceta=_id_presetReceta;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CAMBIAR_CONTRASENA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CAMBIAR_CONTRASENA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CAMBIAR_CONTRASENA`(
	OUT _estado INT,
	IN _id_usuario INT,
	IN _contrasena VARCHAR(256)
)
BEGIN
	UPDATE usuario SET contrasena=_contrasena
    WHERE id_usuario = _id_usuario;
    IF ROW_COUNT() > 0 THEN
		SET _estado = 1;
    ELSE
		SET _estado = 0;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CANCELAR_CITA_X_ALUMNO_O_ESPECIALISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CANCELAR_CITA_X_ALUMNO_O_ESPECIALISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CANCELAR_CITA_X_ALUMNO_O_ESPECIALISTA`(
	IN _id_cita INT,
    IN _fid_alumno INT,
    IN _fid_especialistaSalud INT
)
BEGIN
	-- NOTA, Si solo es el alumno se pone su id y en esp un -1
	UPDATE cita
    SET estado = 2 -- cancelada
    WHERE id_cita=_id_cita and (fid_alumno=_fid_alumno or fid_especialistaSalud=_fid_especialistaSalud);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CANTIDAD_DE_CITAS_ATENDIDAS_X_ESPECIALISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CANTIDAD_DE_CITAS_ATENDIDAS_X_ESPECIALISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CANTIDAD_DE_CITAS_ATENDIDAS_X_ESPECIALISTA`(
	IN _fid_especialistaSalud INT
)
BEGIN
	SELECT STR_TO_DATE(CONCAT(YEAR(fechaHoraAtencion), "-", MONTH(fechaHoraAtencion)), "%Y-%m") mes, COUNT(fid_especialistaSalud) cantidadCitas 
    FROM pucpsaludable.cita 
    WHERE fid_especialistaSalud = _fid_especialistaSalud
    GROUP BY STR_TO_DATE(CONCAT(YEAR(fechaHoraAtencion), "-", MONTH(fechaHoraAtencion)), "%Y-%m") 
    ORDER BY fechaHoraAtencion DESC;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CAN_CONTINUE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP function IF EXISTS `pucpsaludable`.`CAN_CONTINUE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` FUNCTION `CAN_CONTINUE`(_id_token INT, _codigo VARCHAR(8)) RETURNS int
BEGIN
	DECLARE var_done INT DEFAULT FALSE;
	DECLARE var_time TIMESTAMP;
	DECLARE var_valid TINYINT;
	DECLARE obtenerRegistro CURSOR FOR SELECT `fechaHora`, `valido`  FROM token WHERE id_token = _id_token AND codigo = _codigo ORDER BY id_token DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_done = TRUE;

	OPEN obtenerRegistro;
	FETCH obtenerRegistro INTO var_time, var_valid;
	CLOSE obtenerRegistro;
    # Token desconocido
	IF var_done = 1 THEN
		RETURN 0;
	END IF;
    # Token expirado
	IF var_valid = 0 THEN
		RETURN 0;
	END IF;
    # Esperando validación del token
	IF var_valid = 1 THEN
		RETURN 1;
	END IF;
    # Token validado correctamente
	IF ((TIMESTAMPDIFF(SECOND, var_time, NOW()) < 300) AND var_valid = 2) THEN
		RETURN 2;
	END IF;
    # Error desconocido
    RETURN 3;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CONSULTAR_CITAS
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CONSULTAR_CITAS`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CONSULTAR_CITAS`()
BEGIN
	SELECT c.id_cita, ua.nombres, ua.apellidos, ue.nombres, ue.apellidos, c.fechaHoraRegistro, c.fechaHoraAtencion, c.diagnostico, c.referencia, c.atencion
	FROM cita c INNER JOIN especialistaSalud es ON c.fid_especialistaSalud  = es.id_especialistaSalud
	INNER JOIN especialista e ON es.id_especialistaSalud = e.id_especialista
	INNER JOIN usuario ue ON ue.id_usuario = e.id_especialista
	INNER JOIN alumno a ON c.fid_alumno  = a.id_alumno
	INNER JOIN usuario ua ON ue.id_usuario = a.id_alumno
	WHERE c.estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CONSULTAR_HORARIO_HABITUAL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CONSULTAR_HORARIO_HABITUAL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CONSULTAR_HORARIO_HABITUAL`(
	IN _fid_alumno INT
)
BEGIN
	SELECT * FROM horariohabitual hh
    WHERE _fid_alumno = hh.fid_alumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CONSULTAR_INDICADOR_SALUD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CONSULTAR_INDICADOR_SALUD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CONSULTAR_INDICADOR_SALUD`(
	IN _fid_alumno INT
)
BEGIN
	SELECT * FROM indicadorsalud ins
    WHERE _fid_alumno = ins.fid_alumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CONSULTAR_TALLERES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`CONSULTAR_TALLERES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `CONSULTAR_TALLERES`()
BEGIN
	SELECT t.id_taller, t.nombre, d.nombre, ue.nombres, ue.apellidos, t.fechaInicio, t.fechaFin, t.lugar, t.capacidad
	FROM taller t INNER JOIN especialista_has_taller et ON t.id_taller  = et.fid_taller
	INNER JOIN entrenador en ON et.fid_entrenador = en.id_entrenador
	INNER JOIN especialista e ON en.id_entrenador = e.id_especialista
	INNER JOIN usuario ue ON ue.id_usuario = e.id_especialista
	WHERE t.estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DA_HORASSUENO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DA_HORASSUENO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DA_HORASSUENO`(
	IN _fid_usuario INT
)
BEGIN
	SELECT fecha, horas 
    FROM horassueno
    WHERE estado = 1
    AND fid_alumno = _fid_usuario
	ORDER BY fecha DESC
	LIMIT 8;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DA_IMC
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DA_IMC`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DA_IMC`(
IN _id_usuario INT
)
BEGIN
	SELECT
		ia.peso_actual / (ia.estatura * ia.estatura / 10000) imc,
		ia.fecha_registro
	FROM
		indicadorAntropometrico ia
	WHERE
		ia.fid_alumno = _id_usuario AND
		ia.estado = TRUE
	ORDER BY ia.fecha_registro ASC
	LIMIT 8;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DA_MENSAJES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DA_MENSAJES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DA_MENSAJES`()
BEGIN
	SELECT tituloMensaje, mensajeMensaje  
    FROM pucpsaludable.especialista 
    WHERE mensajeMensaje != ""
	order by rand() ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DA_VIDEOS
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DA_VIDEOS`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DA_VIDEOS`()
BEGIN
	SELECT URLVideoInformativo FROM pucpsaludable.especialista WHERE URLVideoInformativo != "";
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DN_AGREGARVIDEOESP
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DN_AGREGARVIDEOESP`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DN_AGREGARVIDEOESP`(
	IN _id_especialista INT,
    IN _URLVideoInformativo VARCHAR(256)
)
BEGIN
	UPDATE especialista
    SET URLVideoInformativo=_URLVideoInformativo
    WHERE id_especialista=_id_especialista;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DN_CANTCITASATENDIDASESP
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DN_CANTCITASATENDIDASESP`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DN_CANTCITASATENDIDASESP`(
	IN _fid_especialistaSalud INT
)
BEGIN
	SELECT STR_TO_DATE(CONCAT(YEAR(fechaHoraAtencion), "-", MONTH(fechaHoraAtencion)), "%Y-%m") mes, COUNT(fid_especialistaSalud) cantidadCitas 
    FROM pucpsaludable.cita 
    WHERE fid_especialistaSalud = _fid_especialistaSalud
    AND estado != 0
    GROUP BY STR_TO_DATE(CONCAT(YEAR(fechaHoraAtencion), "-", MONTH(fechaHoraAtencion)), "%Y-%m") 
    ORDER BY fechaHoraAtencion DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DN_IMCPROMESP
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DN_IMCPROMESP`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DN_IMCPROMESP`()
BEGIN
	# IMC promedio por especialidades
    # Hombres y mujeres por separado (no entra nada) (sale IMC promedio hombre, IMC promedio mujeres)
	SELECT
		es.nombreEspecialidad,
		AVG(CASE WHEN us.sexo = 'M' THEN 1 END * ia.peso_actual / (ia.estatura * ia.estatura / 10000)) imch,
		AVG(CASE WHEN us.sexo = 'F' THEN 1 END * ia.peso_actual / (ia.estatura * ia.estatura / 10000)) imcm,
		AVG(CASE WHEN us.sexo = 'O' THEN 1 END * ia.peso_actual / (ia.estatura * ia.estatura / 10000)) imcnb
	FROM
		usuario us,
		alumno al,
		indicadorAntropometrico ia,
		especialidad es
	WHERE
		us.id_usuario = al.id_alumno AND
		al.id_alumno = ia.fid_alumno AND
		al.fid_especialidad = es.id_especialidad AND
		ia.estado = TRUE
	GROUP BY
		es.nombreEspecialidad;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DN_INCCATIMC
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`DN_INCCATIMC`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `DN_INCCATIMC`()
BEGIN
	SELECT
		categoria, COUNT(*) AS cantidad
        FROM
        (
			SELECT
				CASE
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 0 AND 16 THEN 'Delgadez grado III'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 16 AND 17 THEN 'Delgadez grado II'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 17 AND 18.5 THEN 'Delgadez grado I'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 18.5 AND 25 THEN 'Normal'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 25 AND 30 THEN 'Sobrepeso'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 30 AND 35 THEN 'Obesidad grado I'
					WHEN ia.peso_actual / (ia.estatura * ia.estatura / 10000) BETWEEN 35 AND 40 THEN 'Obesidad grado I'
					ELSE 'Obesidad grado I'
				END
				AS categoria
			FROM
				alumno al,
				indicadorAntropometrico ia
			WHERE
				al.id_alumno = ia.fid_alumno AND
				ia.estado = TRUE
		)
        listaCategorias
		GROUP BY
			categoria;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_ALIMENTO_ALUMNO_INGR
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_ALIMENTO_ALUMNO_INGR`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_ALIMENTO_ALUMNO_INGR`(
	IN _fid_alumno INT,
    IN _fid_ingrediente INT
)
BEGIN
	DELETE FROM alimento WHERE fid_alumno = _fid_alumno 
    AND _fid_ingrediente = fid_ingrediente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_ALUMNO`(
                IN _id_alumno INT
            )
BEGIN
                UPDATE usuario SET estado = 0 WHERE _id_alumno = id_usuario;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_CITA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_CITA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_CITA`(
	IN _id_cita INT
)
BEGIN
	UPDATE cita SET estado = 2 WHERE _id_cita = id_cita and estado = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_DEPORTE`(
	IN _id_deporte INT
    
)
BEGIN
	UPDATE deporte
    SET estado = 0
    WHERE id_deporte = _id_deporte;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_ENTRENADOR
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_ENTRENADOR`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_ENTRENADOR`(
                IN _id_entrenador INT
            )
BEGIN
                UPDATE usuario SET estado = 0 WHERE _id_entrenador = id_usuario;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_HORARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_HORARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_HORARIO`(
	IN _id_horario INT
)
BEGIN
	UPDATE horario SET estado = 0 WHERE _id_horario = id_horario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_HORARIOS_ANTERIORES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_HORARIOS_ANTERIORES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_HORARIOS_ANTERIORES`(
    IN _id_espec INT
)
BEGIN
    UPDATE horario SET estado = 0 WHERE _id_espec = fid_especialistaSalud;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_HORAS_SUENO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_HORAS_SUENO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_HORAS_SUENO`(
	IN _id_horas_sueno INT
)
BEGIN
	UPDATE horas_sueno 
    SET estado = 0 
    WHERE _id_horas_sueno = id_horas_sueno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_INDICADOR_ANTROPOMETRICO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_INDICADOR_ANTROPOMETRICO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_INDICADOR_ANTROPOMETRICO`(
	IN _id_indicador_antropometrico INT
)
BEGIN
	UPDATE indicadorAntropometrico 
    SET estado = 0 
    WHERE _id_indicador_antropometrico = id_indicador_antropometrico;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_INGREDIENTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_INGREDIENTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_INGREDIENTE`(
    IN _id_ingrediente INT
)
BEGIN
	# Angel: Corregido a eliminación lógica
	UPDATE ingrediente
    SET estado = 0 WHERE id_ingrediente = _id_ingrediente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_NUTRICIONISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_NUTRICIONISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_NUTRICIONISTA`(
                IN _id_nutricionista INT
            )
BEGIN
                UPDATE usuario SET estado = 0 WHERE _id_nutricionista = id_usuario;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_PESO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_PESO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_PESO`(
	IN _id_peso INT
)
BEGIN
	UPDATE peso
    SET estado = 0 
    WHERE _id_peso = id_peso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_PLANALIMENTARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_PLANALIMENTARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_PLANALIMENTARIO`(
	IN _fecha DATETIME,
	IN _fid_alumno INT,
	IN _fid_nutricionista INT
)
BEGIN
	UPDATE planAlimentario
	SET estado = 0
	WHERE fecha = _fecha
		AND fid_alumno = _fid_alumno
		AND fid_nutricionista = _fid_nutricionista;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_PLANES_ALIMENTARIOS_X_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_PLANES_ALIMENTARIOS_X_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_PLANES_ALIMENTARIOS_X_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	UPDATE planalimentario
    SET estado = 0
    WHERE fid_alumno = _fid_alumno and estado = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_PRESETRECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_PRESETRECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_PRESETRECETA`(
	IN _id_preseReceta INT
    
)
BEGIN
	UPDATE presetReceta
	# Angel: Corregido a eliminación lógica
    SET estado = 0 WHERE id_presetTeceta=_id_presetTeceta; 
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_PSICOLOGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_PSICOLOGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_PSICOLOGO`(
                IN _id_psicologo INT
            )
BEGIN
                UPDATE usuario SET estado = 0 WHERE _id_psicologo = id_usuario;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_RECETA`(
	IN _id_receta INT
)
BEGIN
	# Angel: Corregido a eliminación lógica
	UPDATE receta
    SET estado = 0 WHERE id_receta = _id_receta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_REGLA`(
	IN _id_regla int
)
BEGIN
	UPDATE regla
	SET estado = 0
	WHERE id_regla = _id_regla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_ROL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_ROL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_ROL`(
	IN _id_rol int
)
BEGIN
	UPDATE rol
	SET estado = 0
	WHERE id_rol = _id_rol;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_ROL_HAS_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_ROL_HAS_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_ROL_HAS_REGLA`(
	IN _fid_rol int
)
BEGIN
	UPDATE rol_has_regla
	SET estado = 0
	WHERE fid_rol = _fid_rol;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_SESIONACTIVA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_SESIONACTIVA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_SESIONACTIVA`(
	IN _id_sesionActiva int
)
BEGIN
	UPDATE sesionActiva
	SET valida = 0
	WHERE id_sesionActiva = _id_sesionActiva;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_TALLER
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_TALLER`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_TALLER`(
	IN _id_taller INT
)
BEGIN
	UPDATE taller SET estado = 0 WHERE _id_taller = id_taller;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_TIPO_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_TIPO_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_TIPO_DEPORTE`(
	IN _id_tipoDeporte INT
    
)
BEGIN
	UPDATE tipoDeporte
    SET estado = 0
    WHERE id_tipoDeporte = _id_tipoDeporte;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ELIMINAR_TOKEN
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`ELIMINAR_TOKEN`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `ELIMINAR_TOKEN`(
	IN _id_token int
)
BEGIN
	UPDATE token
	SET valido = 0
	WHERE id_token = _id_token;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure FILTRAR_ALIMENTO_POR_PREFERENCIA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`FILTRAR_ALIMENTO_POR_PREFERENCIA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `FILTRAR_ALIMENTO_POR_PREFERENCIA`(
	IN _fid_alumno INT,
	IN _preferencia INT
)
BEGIN
	SELECT * FROM alimento al
    WHERE _fid_alumno = al.fid_alumno AND al.preferencia = _preferencia;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GENERAR_PLAN_ALIMETARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`GENERAR_PLAN_ALIMETARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `GENERAR_PLAN_ALIMETARIO`(
IN _id_usuario INT,
IN _limite INT,
IN _tipo_comida TINYINT
)
BEGIN
# Presets de receta con ingredientes que me gustan y sin ingredientes que no me gustan
# Vienen a ser la prioridad en la generación del plan. Se toman todas

    SELECT pr.id_presetReceta, pr.nombre, pr.kcaltotales, pr.estado, re.tipo FROM presetReceta pr
    inner join receta_has_PresetReceta repr on pr.id_presetReceta = repr.fid_presetReceta
	inner join receta re on re.id_receta = repr.fid_receta
	WHERE id_presetReceta
	NOT IN
	(
		SELECT fid_presetReceta
		FROM presetReceta_has_Ingrediente
		WHERE fid_ingrediente
		IN
		(
			SELECT fid_ingrediente 
			FROM alimento
			WHERE preferencia = 0 and preferencia = 2
			AND fid_alumno = _id_usuario
		)GROUP BY fid_presetReceta
	)
	AND id_presetReceta
	IN
	(
		SELECT fid_presetReceta
		FROM presetReceta_has_Ingrediente
		WHERE fid_ingrediente
		IN
		(
			SELECT fid_ingrediente
			FROM alimento
			WHERE preferencia = 1
			AND fid_alumno = _id_usuario
		)
		GROUP BY fid_presetReceta
	)
    AND re.id_receta = repr.fid_receta
    AND pr.id_presetReceta = repr.fid_presetReceta
    AND re.tipo = _tipo_comida
	UNION ALL
    (
		# Presets de receta con ingredientes que podrían gustarme y sin ingredientes que no me gustan
		# Vienen a ser complementario en la generación del plan. Se adicionan al final de las preferidas
		    SELECT pr.id_presetReceta, pr.nombre, pr.kcaltotales, pr.estado, re.tipo FROM presetReceta pr
			inner join receta_has_PresetReceta repr on pr.id_presetReceta = repr.fid_presetReceta
			inner join receta re on re.id_receta = repr.fid_receta
		WHERE id_presetReceta
		NOT IN
		(
			SELECT fid_presetReceta
			FROM presetReceta_has_Ingrediente
			WHERE fid_ingrediente
			IN
			(
				SELECT fid_ingrediente
				FROM alimento
				WHERE preferencia = 0
				AND fid_alumno = _id_usuario
			)GROUP BY fid_presetReceta
		)
		AND id_presetReceta
		NOT IN
		(
			SELECT fid_presetReceta
			FROM presetReceta_has_Ingrediente
			WHERE fid_ingrediente
			IN
			(
				SELECT fid_ingrediente
				FROM alimento
				WHERE preferencia = 1
				AND fid_alumno = _id_usuario
			)
			GROUP BY fid_presetReceta
		)
        AND id_presetReceta
		NOT IN
		(
			SELECT fid_presetReceta
			FROM presetReceta_has_Ingrediente
			WHERE fid_ingrediente
			IN
			(
				SELECT fid_ingrediente
				FROM alimento
				WHERE preferencia = 2
				AND fid_alumno = _id_usuario
			)
			GROUP BY fid_presetReceta
		)
		AND re.id_receta = repr.fid_receta
		AND pr.id_presetReceta = repr.fid_presetReceta
		AND re.tipo = _tipo_comida
	)
    ORDER BY RAND()    
    LIMIT _limite
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INICIAR_SESION
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INICIAR_SESION`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INICIAR_SESION`(
	IN _usuario varchar(256),
	IN _contrasena varchar(256),
    IN _descripcion varchar(120),
	OUT _id_sesionactiva int,
	OUT _id_usuario int,
	OUT _rol varchar(40)
)
BEGIN
	DECLARE var_done INT DEFAULT FALSE;
	DECLARE var_id_sesionactiva INT;
	DECLARE var_id_usuario INT;
	DECLARE var_rol VARCHAR(40);
    DECLARE var_estado TINYINT;
	DECLARE obtenerRegistro CURSOR FOR
    SELECT
		us.`id_usuario`,
		ro.`nombre`,
        us.`estado`
	FROM
		usuario us,
		rol ro
	WHERE
		(us.codigoPUCP = _usuario OR
        us.emailPUCP = _usuario) AND
        us.contrasena = _contrasena AND
        ro.id_rol = us.fid_rol
	ORDER BY id_usuario DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_done = TRUE;

	OPEN obtenerRegistro;
		FETCH obtenerRegistro INTO var_id_usuario, var_rol, var_estado;
	CLOSE obtenerRegistro;
    # Inicio de sesión fallido
	IF var_done = 1 THEN
		SET _id_sesionactiva = 0;
	# Inicio de sesión exitosa
	ELSEIF var_estado = 0 THEN
        SET _id_sesionactiva = -1;
	ELSEIF var_estado = 2 THEN
        SET _id_sesionactiva = -2;
	ELSEIF var_estado = 3 THEN
        SET _id_sesionactiva = -3;
    ELSE
		CALL INSERTAR_SESIONACTIVA(var_id_sesionactiva, var_id_usuario, _descripcion);
        SET _id_sesionactiva = var_id_sesionactiva;
		SET _id_usuario = var_id_usuario;
        SET _rol = var_rol;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_ALUMNO`(
	OUT _id_alumno INT,
	IN _codigoPUCP VARCHAR(8),
	IN _contrasena VARCHAR(256),
	IN _nombres VARCHAR(40),
	IN _apellidos VARCHAR(40),
	IN _emailPUCP VARCHAR(256),
	IN _telefonoMovil VARCHAR(9),
	IN _fechaNacimiento DATE,
    IN _sexo CHAR(1),
	IN _fid_especialidad INT,
	IN _nombreContacto VARCHAR(45),
	IN _parentezcoContacto VARCHAR(45),
	IN _numContacto VARCHAR(9)
)
BEGIN
INSERT INTO
usuario
(
codigoPUCP,
contrasena,
nombres,
apellidos,
emailPUCP,
fechaNacimiento,
sexo,
fid_rol
)
VALUES
(
_codigoPUCP,
_contrasena,
_nombres,
_apellidos,
_emailPUCP,
_fechaNacimiento,
_sexo,
1
);
SET _id_alumno = @@last_insert_id;
INSERT INTO alumno(id_alumno,fid_especialidad,nombreContacto,parentezcoContacto,numContacto)
VALUES (_id_alumno,_fid_especialidad,_nombreContacto,_parentezcoContacto,_numContacto);
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_CITA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_CITA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_CITA`(
	OUT _id_cita INT,
    IN _fid_alumno INT,
    IN _fid_especialista INT,
	IN _fechaHoraAtencion DATETIME,
	IN _diagnostico MEDIUMTEXT,
	IN _referencia VARCHAR(6)
)
BEGIN
	INSERT INTO cita(fid_alumno,fid_especialistaSalud,fechaHoraAtencion,diagnostico,referencia)
    VALUES (_fid_alumno,_fid_especialista,_fechaHoraAtencion,_diagnostico, _referencia);
    SET _id_cita=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_CONSTANCIA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_CONSTANCIA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_CONSTANCIA`(
	IN _fid_alumno INT,
    IN _fechaHoraReg DATETIME,
    IN _archivoConst BLOB,
    IN _estado TINYINT
)
BEGIN
	INSERT INTO constancia(fid_alumno,fechaHoraRegistro,archivoConstancia,estado) 
    VALUES (_fid_alumno,_fechaHoraReg,_archivoConst,_estado);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA`(
            OUT _id_cumplimientoRutina int(10),
            IN _fid_alumno INT,
            IN _fecha DATETIME,
            IN _cumplio TINYINT,
            IN _tipoRutina TINYINT,
            IN _tipoComida TINYINT
            )
BEGIN
                INSERT INTO cumplimientoRutina(fid_alumno,fecha,cumplio,tipoRutina, tipoComida, estado) 
                VALUES(_fid_alumno,_fecha,_cumplio, 0, _tipoComida, 1);
                SET _id_cumplimientoRutina = @@last_insert_id;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_DEPORTE`(
	OUT _id_deporte INT,
    IN _fid_tipoDeporte INT,
    IN _nombre varchar(40)
)
BEGIN
	INSERT INTO deporte (id_deporte,fid_tipoDeporte,nombre,estado)VALUES(_id_deporte,_fid_tipoDeporte,_nombre,1);
    SET _id_deporte=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_ENTRENADOR
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_ENTRENADOR`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_ENTRENADOR`(
                OUT _id_entrenador INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(25),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _fechaNacimiento DATE,    
                IN _sexo CHAR(1),
                IN _telefonoLaboral VARCHAR(9),                
				IN _fid_Deporte INT(10)
            )
BEGIN
                INSERT INTO usuario(codigoPUCP,contrasena,nombres,apellidos,emailPUCP,fechaNacimiento, sexo, fid_rol)
                VALUES (_codigoPUCP,_contrasena,_nombres,_apellidos,_emailPUCP,_fechaNacimiento, _sexo, 4);
                SET _id_entrenador=@@last_insert_id;
                INSERT INTO especialista(id_especialista, telefonoLaboral)
                VALUES (_id_entrenador, _telefonoLaboral);
                INSERT INTO entrenador(id_entrenador, fid_Deporte)
                VALUES (_id_entrenador, _fid_Deporte);
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_ESPECIALIDAD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_ESPECIALIDAD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_ESPECIALIDAD`(
                    OUT _id_especialidad INT,
                    IN _id_facultad INT,
                    IN _nombreEspecialidad varchar(100),
                    IN _descripcionEspecialidad varchar(255)
            )
BEGIN
            INSERT INTO especialidad(fid_facultad,nombreEspecialidad,descripcionEspecialidad ) 
                VALUES(_id_facultad,_nombreEspecialidad,_descripcionEspecialidad);
                SET _id_especialidad = @@last_insert_id;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_FACULTAD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_FACULTAD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_FACULTAD`(
                    OUT _id_facultad INT,
                    IN _nombreFacultad varchar(100),
                    IN _descripcionFacultad varchar(255)
            )
BEGIN
            INSERT INTO facultad(nombreFacultad,descripcionFacultad) 
                VALUES(_nombreFacultad,_descripcionFacultad);
                SET _id_facultad = @@last_insert_id;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_HORARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_HORARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_HORARIO`(
	OUT _id_horario INT,	
	IN _fid_especialistaSalud INT,
	IN _horaInicio DATETIME,
	IN _horaFin DATETIME,
	IN _diaSemana INT,
	IN _fechaHoraRegistro DATETIME,
	IN _estado TINYINT
)
BEGIN	  
	INSERT INTO horario(fid_especialistaSalud,horaInicio,horaFin,diaSemana,fechaHoraRegistro,estado)
	VALUES (_fid_especialistaSalud,TIME(_horaInicio),TIME(_horaFin),_diaSemana,_fechaHoraRegistro,_estado);
	SET _id_horario=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_HORARIO_HABITUAL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_HORARIO_HABITUAL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_HORARIO_HABITUAL`(
	IN _fid_alumno INT,
    IN _despertarse	TIME,
	IN _acostarse	TIME,
	IN _desayuno	TIME,
	IN _mediaManana	TIME,
	IN _comida	TIME,
	IN _merienda	TIME,
	IN _cena	TIME
)
BEGIN
	INSERT INTO horariohabitual(fid_alumno,despertarse,acostarse,desayuno,mediaManana,comida,merienda,cena) 
    VALUES(_fid_alumno,_despertarse,_acostarse,_desayuno,_mediaManana,_comida,_merienda,_cena); 
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_HORAS_SUENHO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_HORAS_SUENHO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_HORAS_SUENHO`(
	OUT _id_horas_sueno INT,
	IN _fid_alumno INT,
	IN _fecha DATE,
    IN _horas DOUBLE(8,2)
)
BEGIN
	INSERT INTO horasSueno(fid_alumno,fecha,horas,estado) 
    VALUES(_fid_alumno,_fecha,_horas,1);
    SET _id_horas_sueno = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_INDICADOR_ANTROPOMETRICO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_INDICADOR_ANTROPOMETRICO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_INDICADOR_ANTROPOMETRICO`(
	OUT _id_indicador_antropometrico INT,
	IN _fid_alumno INT,
    IN _peso_habitual DOUBLE(5,2),
    IN _estatura DOUBLE(5,2),
    IN _circunferencia_brazo DOUBLE(5,2),
    IN _circunferencia_cintura DOUBLE(5,2),
    IN _circunferencia_cadera DOUBLE(5,2),
    IN _circunferencia_abdominal DOUBLE(5,2),
    IN _fecha_registro DATE
)
BEGIN
	INSERT INTO indicadorantropometrico(fid_alumno,peso_actual,estatura,circunferencia_brazo,circunferencia_cintura,circunferencia_cadera,circunferencia_abdominal,fecha_registro,estado) 
    VALUES(_fid_alumno,_peso_habitual,_estatura,_circunferencia_brazo,_circunferencia_cintura,_circunferencia_cadera,_circunferencia_abdominal,_fecha_registro,1); 
    SET _id_indicador_antropometrico = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_INDICADOR_SALUD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_INDICADOR_SALUD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_INDICADOR_SALUD`(
	IN _fid_alumno INT,
    IN _cafe	TINYINT,
	IN _alcohol	TINYINT,
	IN _tabaco	TINYINT,
	IN _laxantes	TINYINT,
	IN _diureticos	TINYINT,
	IN _antiacidos	TINYINT,
	IN _analgesicos	TINYINT,
	IN _anticonceptivos_orales	TINYINT,
	IN _terapia_hormonal	TINYINT,
	IN _diarrea	TINYINT,
	IN _celiaquia	TINYINT,
	IN _estrenimiento	TINYINT,
	IN _gastritis	TINYINT,
	IN _ulcera	TINYINT,
	IN _nausea	TINYINT,
	IN _pirosis	TINYINT,
	IN _vomito	TINYINT,
	IN _colitis	TINYINT,
	IN _dentadura	TINYINT,
	IN _sensibilidad_dental	TINYINT,
	IN _embarazo	TINYINT,
	IN _climaterio	TINYINT,
	IN _cirugias_previas	TINYTEXT,
	IN _aFObesidad	TINYINT,
	IN _aFDiabetes	TINYINT,
	IN _aFHTA	TINYINT,
	IN _aFCancer	TINYINT,
	IN _aFHipercolesterolemia	TINYINT,
	IN _aFHipertrigliceridemia	TINYINT,
	IN _alergiasMed VARCHAR(100)
)
BEGIN
	INSERT INTO indicadorsalud(fid_alumno,cafe,alcohol,tabaco,laxantes,diureticos,
    antiacidos,analgesicos,anticonceptivosOrales,terapiaHormonal,
	diarrea,celiaquia,estrenimiento,gastritis,ulcera,nausea,pirosis,vomito,colitis,
    dentadura,sensibilidadDental,embarazo,climaterio,
	cirugiasPrevias,aFObesidad,aFDiabetes,aFHTA,aFCancer,aFHipercolesterolemia,
    aFHipertrigliceridemia,alergiasMed) 
    VALUES(_fid_alumno,_cafe,_alcohol,_tabaco,_laxantes,_diureticos,_antiacidos,
    _analgesicos,_anticonceptivos_orales,_terapia_hormonal,
	_diarrea,_celiaquia,_estrenimiento,_gastritis,_ulcera,_nausea,_pirosis,_vomito,
    _colitis,_dentadura,_sensibilidad_dental,_embarazo,_climaterio,
	_cirugias_previas,_aFObesidad,_aFDiabetes,_aFHTA,_aFCancer,
    _aFHipercolesterolemia,_aFHipertrigliceridemia,_alergiasMed); 
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_INGREDIENTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_INGREDIENTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_INGREDIENTE`(
	OUT _id_ingrediente INT,
    IN _nombre VARCHAR(80),
    IN _unidad VARCHAR(10),
    IN _cantidad DOUBLE,
    IN _kcal DOUBLE,
    IN _grasasSaturadas TINYINT,
    IN _azucar TINYINT,
    IN _sodio TINYINT,
    IN _grasasTrans TINYINT
)
BEGIN
	INSERT INTO ingrediente(nombre,unidad,cantidad,kcal,grasasSaturadas,azucar,sodio,grasasTrans,estado)
    VALUES(_nombre,_unidad,_cantidad,_kcal,_grasasSaturadas,_azucar,_sodio,_grasasTrans,1);
    SET _id_ingrediente=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_NUTRICIONISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_NUTRICIONISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_NUTRICIONISTA`(
                OUT _id_nutricionista INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(256),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _fechaNacimiento DATE,    
                IN _sexo CHAR(1),
                IN _telefonoLaboral VARCHAR(9),                
                IN _colegiatura VARCHAR(45)
			)
BEGIN
                INSERT INTO usuario(codigoPUCP,contrasena,nombres,apellidos,emailPUCP,fechaNacimiento, sexo, estado, fid_rol)
                VALUES (_codigoPUCP,_contrasena,_nombres,_apellidos,_emailPUCP,_fechaNacimiento, _sexo, 2, 2);
                SET _id_nutricionista=@@last_insert_id;
                INSERT INTO especialista(id_especialista, telefonoLaboral)
                VALUES (_id_nutricionista, _telefonoLaboral);
                INSERT INTO especialistaSalud(id_especialistaSalud, colegiatura)
                VALUES (_id_nutricionista, _colegiatura);            
                INSERT INTO nutricionista(id_nutricionista)
                VALUES (_id_nutricionista);            
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_PESO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_PESO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_PESO`(
	OUT _id_peso INT,
	IN _fid_alumno INT,
	IN _fecha_registro DATE,
    IN _peso_actual DOUBLE(4,2)
)
BEGIN
	INSERT INTO peso(fid_alumno,fecha_registro,peso_actual,estado) 
    VALUES(_fid_alumno,_fecha_registro,_peso_actual,1);
    SET _id_peso = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_PLANALIMENTARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_PLANALIMENTARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_PLANALIMENTARIO`(
	IN _fid_alumno INT,
	IN _fid_presetReceta INT,
	IN _fid_nutricionista INT,
	IN _tipoComida TINYINT,
	IN _dia TINYINT
)
BEGIN
	INSERT INTO planAlimentario
    (
		fid_alumno,
		fid_presetReceta,
		fid_nutricionista,
		tipoComida,
        dia
    )
    VALUES
    (
		_fid_alumno,
		_fid_presetReceta,
		_fid_nutricionista,
		_tipoComida,
        _dia
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_PRESETRECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_PRESETRECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_PRESETRECETA`(
	OUT _id_preseReceta INT,
    IN _nombre VARCHAR(40),
    IN _kcalTotales DOUBLE,
    IN _tipo TINYINT
)
BEGIN
	INSERT INTO presetReceta(nombre,kcalTotales,estado,tipo) VALUES(_nombre,_kcalTotales,1,_tipo);
    SET _id_preseReceta=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_PSICOLOGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_PSICOLOGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_PSICOLOGO`(
                OUT _id_psicologo INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(25),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _fechaNacimiento DATE,    
                IN _sexo CHAR(1),
                IN _telefonoLaboral VARCHAR(9),                
                IN _colegiatura VARCHAR(45)
            

            )
BEGIN
                INSERT INTO usuario(codigoPUCP,contrasena,nombres,apellidos,emailPUCP,fechaNacimiento, sexo, fid_rol)
                VALUES (_codigoPUCP,_contrasena,_nombres,_apellidos,_emailPUCP,_fechaNacimiento, _sexo, 3);
                SET _id_psicologo=@@last_insert_id;
                INSERT INTO especialista(id_especialista, telefonoLaboral)
                VALUES (_id_psicologo, _telefonoLaboral);
                INSERT INTO especialistaSalud(id_especialistaSalud, colegiatura)
                VALUES (_id_psicologo, _colegiatura);            
                INSERT INTO psicologo(id_psicologo)
                VALUES (_id_psicologo);            
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_RECETA`(
	OUT _id_receta INT,
    IN _nombre VARCHAR(40),
    IN _descripcion MEDIUMTEXT,
    IN _indicaciones MEDIUMTEXT,
    IN _tipo TINYINT
)
BEGIN
	# Angel: agregado tipo
	INSERT INTO receta(nombre,descripcion,indicaciones, tipo,estado) VALUES(_nombre,_descripcion,_indicaciones, _tipo,1);
    SET _id_receta=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_REGLA`(
	OUT _id_regla int,
    IN _nombre varchar(40),
    IN _clave int,
    IN _tipo int
)
BEGIN
	INSERT INTO regla
    (
		nombre,
		clave,
		tipo
	)
    VALUES
    (
		_nombre,
		_clave,
		_tipo
	);
    SET
		_id_regla = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_ROL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_ROL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_ROL`(
	OUT _id_rol int,
    IN _nombre varchar(40)
)
BEGIN
	INSERT INTO rol
    (
		nombre
	)
    VALUES
    (
		_nombre
	);
    SET
		_id_rol = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_ROL_HAS_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_ROL_HAS_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_ROL_HAS_REGLA`(
	IN _fid_rol int,
	IN _fid_regla int
)
BEGIN
	INSERT INTO rol_has_regla
    (
		fid_rol,
		fid_regla
	)
    VALUES
    (
		_fid_rol,
		_fid_regla
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_SESIONACTIVA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_SESIONACTIVA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_SESIONACTIVA`(
	OUT _id_sesionActiva int,
	IN _fid_usuario int,
	IN _descripcion varchar(120)
)
BEGIN
	INSERT INTO sesionActiva
    (
		fid_usuario,
		descripcion
	)
    VALUES
    (
		_fid_usuario,
		_descripcion
	);
    SET
		_id_sesionActiva = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_TALLER
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_TALLER`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_TALLER`(
	OUT _id_taller INT,
	IN _fid_deporte INT,
	IN _nombre VARCHAR(100),
	IN _fechaInicio DATE,
	IN _fechaFin DATE,
	IN _lugar VARCHAR(100),
	IN _estado TINYINT,
	IN _capacidad INT
)
BEGIN
	INSERT INTO taller(fid_deporte,nombre,fechaInicio,fechaFin,lugar,estado,capacidad)
	VALUES (_fid_deporte,_nombre,_fechaInicio,_fechaFin,_lugar,_estado,_capacidad);
	SET _id_taller=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_TIPO_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_TIPO_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_TIPO_DEPORTE`(
	OUT _id_tipoDeporte INT,
    IN _nombre varchar(40),
    IN _descripcion tinytext
)
BEGIN
	INSERT INTO tipoDeporte (id_tipoDeporte,nombre,descripcion,estado)VALUES(_id_tipoDeporte,_nombre,_descripcion,1);
    SET _id_tipoDeporte=@@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure INSERTAR_TOKEN
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`INSERTAR_TOKEN`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `INSERTAR_TOKEN`(
	OUT _id_token int,
	IN _codigo varchar(8),
	IN _fechaHora datetime
)
BEGIN
	INSERT INTO token
    (
		codigo,
		fechaHora
	)
    VALUES
    (
		_codigo,
		_fechaHora
	);
    SET
		_id_token = @@last_insert_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function IS_VALID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP function IF EXISTS `pucpsaludable`.`IS_VALID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` FUNCTION `IS_VALID`(_id_token INT, _codigo VARCHAR(8)) RETURNS int
BEGIN
	DECLARE var_done INT DEFAULT FALSE;
	DECLARE var_time TIMESTAMP;
	DECLARE var_valid TINYINT;
	DECLARE obtenerRegistro CURSOR FOR SELECT `fechaHora`, `valido`  FROM token WHERE id_token = _id_token AND codigo = _codigo ORDER BY id_token DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_done = TRUE;

	OPEN obtenerRegistro;
	FETCH obtenerRegistro INTO var_time, var_valid;
	CLOSE obtenerRegistro;
    # Token desconocido
	IF var_done = 1 THEN
		RETURN 0;
	END IF;
	#Token ya utilizado
	IF var_valid = 2  THEN
		RETURN 1;
	END IF;
	#Token expirado
	IF var_valid = 0  THEN
		RETURN 2;
	END IF;
    # Token expirado
	IF (TIMESTAMPDIFF(SECOND, var_time, NOW()) > 300) THEN
		UPDATE token SET valido = 0 WHERE id_token = _id_token AND codigo = _codigo;        
		RETURN 2;
	END IF;
    # Token válido
    UPDATE token SET valido = 2 WHERE id_token = _id_token AND codigo = _codigo;
	RETURN 3;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALIMENTO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALIMENTO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALIMENTO`()
BEGIN
	SELECT * FROM alimento al
	WHERE al.preferencia = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALIMENTO_ALERGIA_POR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALIMENTO_ALERGIA_POR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALIMENTO_ALERGIA_POR_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT * FROM alimento al
    WHERE _fid_alumno = al.fid_alumno AND al.preferencia = 2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALIMENTO_PREFERIDO_POR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALIMENTO_PREFERIDO_POR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALIMENTO_PREFERIDO_POR_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT * FROM alimento al
    WHERE _fid_alumno = al.fid_alumno AND al.preferencia = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALUMNO`()
BEGIN
                SELECT * FROM usuario u INNER JOIN alumno a ON
                u.id_usuario = a.id_alumno and u.estado = 1 INNER JOIN especialidad e ON 
                a.fid_especialidad = e.id_especialidad INNER JOIN facultad f ON
                f.id_facultad = e.fid_facultad;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALUMNO_X_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALUMNO_X_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALUMNO_X_ID`(
	_id INT(20)
)
BEGIN
	SELECT * FROM usuario u INNER JOIN alumno a ON
                u.id_usuario = a.id_alumno INNER JOIN especialidad e ON 
                a.fid_especialidad = e.id_especialidad INNER JOIN facultad f ON
                f.id_facultad = e.fid_facultad WHERE _id = a.id_alumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ALUMNO_X_NOMBRECODIGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ALUMNO_X_NOMBRECODIGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ALUMNO_X_NOMBRECODIGO`(
	_nombre VARCHAR(100)    
)
BEGIN
	SELECT * FROM usuario u INNER JOIN alumno a ON
                u.id_usuario = a.id_alumno and u.estado = 1 INNER JOIN especialidad e ON 
                a.fid_especialidad = e.id_especialidad INNER JOIN facultad f ON
                f.id_facultad = e.fid_facultad WHERE (CONCAT(u.nombres," ",u.apellidos) LIKE CONCAT('%',_nombre,'%') ) OR (u.codigoPUCP LIKE CONCAT('%',_nombre,'%')) ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA`()
BEGIN
	SELECT * FROM cita ci WHERE ci.estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITAS_DISPONIBLES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITAS_DISPONIBLES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITAS_DISPONIBLES`(
	IN _id_especialista INT,
    IN _fecha dateTIME
)
BEGIN
	SELECT
		STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaInicio), '%Y-%m-%d %H:%i:%s') AS fechaHoraInicio,
		STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaFin), '%Y-%m-%d %H:%i:%s') AS fechaHoraFin
		FROM
		horario
        WHERE
        diaSemana = WEEKDAY(_fecha)
        AND
        fid_especialistaSalud = _id_especialista
        AND estado = 1
        AND STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaInicio), '%Y-%m-%d %H:%i:%s')
        NOT IN
        (
			SELECT fechaHoraAtencion
            FROM cita
            WHERE
            DATE(fechaHoraAtencion) = DATE(_fecha)
            AND fid_especialistaSalud = _id_especialista
            AND estado <> 2
        )
        AND STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaInicio), '%Y-%m-%d %H:%i:%s') >= CURRENT_TIMESTAMP();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITAS_RESERVADAS
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITAS_RESERVADAS`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITAS_RESERVADAS`(
	IN _id_especialista INT,
    IN _fecha dateTIME
)
BEGIN
		SELECT fechaHoraAtencion FROM cita WHERE DATE(fechaHoraAtencion) = DATE(_fecha) AND fid_especialistaSalud = _id_especialista AND estado <> 2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_ID`(
	_id INT(20)
)
BEGIN
	SELECT * FROM cita ci
    INNER JOIN nutricionista nu ON ci.fid_EspecialistaSalud = nu.id_nutricionista
    INNER JOIN usuario us ON us.id_usuario = nu.id_nutricionista
    WHERE _id = ci.fid_especialistaSalud  and ci.estado != 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_NOMBRE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_NOMBRE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_HISTORICA_NUTRICIONISTA_X_NOMBRE`(
	_nombre VARCHAR(100)
)
BEGIN
	SELECT * FROM cita ci INNER JOIN nutricionista nu ON ci.fid_alumno = nu.id_nutricionista INNER JOIN usuario us ON us.id_usuario = nu.id_nutricionista WHERE CONCAT(us.nombres," ",us.apellidos) LIKE CONCAT('%',_nombre,'%') and ci.estado = 1 and atencion != 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_HISTORICA_X_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_HISTORICA_X_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_HISTORICA_X_ID`(
	_id INT
)
BEGIN
	SELECT *
    FROM cita ci
    INNER JOIN
    usuario us
    ON ci.fid_alumno = us.id_usuario
    WHERE _id = ci.fid_alumno
    AND ci.estado != 0
    ORDER BY
    ci.fechaHoraAtencion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_HISTORICA_X_NOMBRECODIGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_HISTORICA_X_NOMBRECODIGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_HISTORICA_X_NOMBRECODIGO`(
	_nombre VARCHAR(100)
)
BEGIN
	SELECT * FROM cita ci INNER JOIN usuario us ON ci.fid_alumno = us.id_usuario WHERE ((CONCAT(us.nombres," ",us.apellidos," ",us.codigoPUCP) LIKE CONCAT('%',_nombre,'%')) OR (us.codigoPUCP LIKE CONCAT('%',_codigoPUCP,'%'))) and ci.estado = 1 and atencion != 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_ID`(
	_id INT(20)
)
BEGIN
	SELECT *
    FROM cita ci
    INNER JOIN nutricionista nu ON ci.fid_especialistaSalud = nu.id_nutricionista 
    INNER JOIN usuario us ON us.id_usuario = nu.id_nutricionista
    WHERE _id = ci.fid_especialistaSalud and ci.estado = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_NOMBRE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_NOMBRE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_PROGRAMADA_NUTRICIONISTA_X_NOMBRE`(
	_nombre VARCHAR(100)
)
BEGIN
	SELECT * FROM cita ci INNER JOIN nutricionista nu ON ci.fid_alumno = nu.id_nutricionista  INNER JOIN usuario us ON us.id_usuario = nu.id_nutricionista WHERE CONCAT(us.nombres," ",us.apellidos) LIKE CONCAT('%',_nombre,'%') and ci.estado = 1 and atencion = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_PROGRAMADA_X_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_PROGRAMADA_X_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_PROGRAMADA_X_ID`(
	_id INT
)
BEGIN
    SELECT *
    FROM cita ci
    INNER JOIN usuario us
    ON ci.fid_alumno = us.id_usuario
    WHERE _id = ci.fid_alumno
    AND ci.estado = 0
    ORDER BY
    ci.fechaHoraAtencion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CITA_PROGRAMADA_X_NOMBRECODIGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CITA_PROGRAMADA_X_NOMBRECODIGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CITA_PROGRAMADA_X_NOMBRECODIGO`(
	_nombre VARCHAR(100)
)
BEGIN
	SELECT * FROM cita ci INNER JOIN usuario us ON ci.fid_alumno = us.id_usuario WHERE ((CONCAT(u.nombres," ",u.apellidos," ",u.codigoPUCP) LIKE CONCAT('%',_nombre,'%')) OR (us.codigoPUCP LIKE CONCAT('%',_codigoPUCP,'%')))  and ci.estado = 1 and atencion = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO`(
	IN _id_alumno INT
)
BEGIN

	select * from(
    	select * from cumplimientorutina
		where fid_alumno = _id_alumno
		order by fecha desc
		limit 70   
    ) AS TAB order by fecha asc, tipoComida asc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO_FECHA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO_FECHA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA_X_IDALUMNO_FECHA`(
	IN _id_alumno INT,
    IN _fecha DATETIME    
)
BEGIN
	select * from cumplimientorutina
	where fid_alumno = _id_alumno and fecha = _fecha
	order by fecha asc, tipoComida asc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_DEPORTE`(
)
BEGIN
	SELECT d.id_deporte,d.fid_tipoDeporte,d.nombre,t.nombre 
	FROM deporte d INNER JOIN tipoDeporte t ON d.fid_tipoDeporte = t.id_tipoDeporte WHERE d.estado=1;        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ENTRENADOR
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ENTRENADOR`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ENTRENADOR`()
BEGIN
                SELECT * FROM usuario u INNER JOIN especialista e ON
                u.id_usuario = e.id_especialista and u.estado = 1 INNER JOIN entrenador en ON
                en.id_entrenador = u.id_usuario INNER JOIN deporte d ON
                en.fid_Deporte = d.id_deporte INNER JOIN tipoDeporte t ON
                d.fid_tipoDeporte = t.id_tipoDeporte;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_HORARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_HORARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_HORARIO`()
BEGIN
	SELECT * FROM horario h 
    WHERE u.estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_HORARIOSDISPONIBLES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_HORARIOSDISPONIBLES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_HORARIOSDISPONIBLES`(
	IN _id_especialista INT,
    IN _fecha dateTIME
)
BEGIN
		SELECT * FROM horario WHERE diaSemana = WEEKDAY(_fecha) AND fid_especialistaSalud = _id_especialista;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_HORARIO_ESPEC_SALUD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_HORARIO_ESPEC_SALUD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_HORARIO_ESPEC_SALUD`(IN _id_espec int)
BEGIN
#	SELECT * FROM horario h 
#    WHERE h.estado = 1 AND _id_espec = h.fid_especialistaSalud;
	SELECT id_horario, fid_especialistaSalud, horaInicio, horaFin, diaSemana, fechaHoraRegistro, estado
	from horario,
	(	select DATE(fechaHoraRegistro) AS fechaMax
		from horario
        where estado = 1
		group by fechaMax
		order by fechaMax desc
		limit 1
	) max
where DATE(horario.fechaHoraRegistro) = max.fechaMax and
fid_especialistaSalud = _id_espec and
estado = 1
order by DATE(horario.fechaHoraRegistro) asc, diaSemana asc, horaInicio asc;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_HORARIO_ESPEC_SALUD_DIA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_HORARIO_ESPEC_SALUD_DIA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_HORARIO_ESPEC_SALUD_DIA`(
	IN _id_especialista INT,
    IN _fecha dateTIME
)
BEGIN
	SELECT
		STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaInicio), '%Y-%m-%d %H:%i:%s') AS fechaHoraInicio,
		STR_TO_DATE(CONCAT(DATE(_fecha), ' ', horaFin), '%Y-%m-%d %H:%i:%s') AS fechaHoraFin
		FROM
		horario
        WHERE
        diaSemana = WEEKDAY(_fecha)
        AND
        fid_especialistaSalud = _id_especialista
        AND fechaHoraRegistro NOT IN
        (
			SELECT fechaHoraRegistro
            FROM cita
            WHERE DATE(fechaHoraAtencion) = DATE(_fecha)
            AND fid_especialistaSalud = _id_especialista
            AND estado <> 2
        )
        AND estado = 1
        ORDER BY fechaHoraInicio;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_HORAS_SUENO_POR_ID_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_HORAS_SUENO_POR_ID_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_HORAS_SUENO_POR_ID_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT id_horas_sueno,fid_alumno,fecha, format(horas, 1) as horas
    FROM horasSueno WHERE estado = 1 AND fid_alumno = _fid_alumno
    order by fecha desc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INDICADOR_ANTROPOMETRICO_POR_ID_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INDICADOR_ANTROPOMETRICO_POR_ID_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INDICADOR_ANTROPOMETRICO_POR_ID_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT id_indicador_antropometrico,fid_alumno,format(peso_actual,1) AS peso_habitual, format(estatura,1) as estatura,format(circunferencia_brazo,1) as circunferencia_brazo,
    format(circunferencia_cintura, 1) as circunferencia_cintura, format(circunferencia_cadera,1) as circunferencia_cadera, format(circunferencia_abdominal,1) as circunferencia_abdominal,fecha_registro 
    FROM indicadorAntropometrico WHERE estado = 1 AND fid_alumno = _fid_alumno
    order by fecha_registro desc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INGREDIENTES
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INGREDIENTES`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INGREDIENTES`(
)
BEGIN
	# Angel: agregada restricción estado
	SELECT * FROM ingrediente WHERE estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INGREDIENTES_DE_PRESET_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INGREDIENTES_DE_PRESET_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INGREDIENTES_DE_PRESET_RECETA`(
	IN _id_Preset_Receta INT
)
BEGIN
	select i.id_ingrediente,i.nombre,p.kcal,p.cantidad,i.unidad,p.detalle from presetReceta_has_Ingrediente p
	INNER JOIN ingrediente i ON i.id_ingrediente= p.fid_ingrediente where fid_presetReceta=_id_Preset_Receta;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INGREDIENTES_NO_CLASIFICADOS
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INGREDIENTES_NO_CLASIFICADOS`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INGREDIENTES_NO_CLASIFICADOS`(
	IN _fid_alumno INT
)
BEGIN
	SELECT * from ingrediente ing
    WHERE ing.id_ingrediente NOT IN
		(
			SELECT al.fid_ingrediente FROM alimento al
            WHERE _fid_alumno = al.fid_alumno
        );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INGREDIENTES_POR_PREF_Y_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INGREDIENTES_POR_PREF_Y_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INGREDIENTES_POR_PREF_Y_ALUMNO`(
	IN _fid_alumno INT,
	IN _pref INT
)
BEGIN
	SELECT * FROM ingrediente ing inner join alimento al
    where ing.id_ingrediente = al.fid_ingrediente
    and al.fid_alumno = _fid_alumno
	AND al.preferencia = _pref;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_INGREDIENTES_X_NOMBRE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_INGREDIENTES_X_NOMBRE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_INGREDIENTES_X_NOMBRE`(
IN _nombre VARCHAR (90))
BEGIN

SELECT * FROM ingrediente WHERE ((estado = 1 ) AND (nombre LIKE CONCAT('%',_nombre,'%')));

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_NUTRICIONISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_NUTRICIONISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_NUTRICIONISTA`()
BEGIN
                SELECT * FROM usuario u INNER JOIN especialista e ON
                u.id_usuario = e.id_especialista and u.estado = 1 INNER JOIN especialistaSalud es ON
                e.id_especialista = es.id_especialistaSalud INNER JOIN nutricionista n ON
                es.id_especialistaSalud = n.id_nutricionista;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_NUTRICIONISTA_POR_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_NUTRICIONISTA_POR_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_NUTRICIONISTA_POR_ID`(
	IN id_nutricionista INT

)
BEGIN
SELECT * FROM usuario u INNER JOIN especialista e ON
	u.id_usuario = e.id_especialista INNER JOIN especialistaSalud es ON
	e.id_especialista = es.id_especialistaSalud INNER JOIN nutricionista n ON
	es.id_especialistaSalud = n.id_nutricionista
    WHERE id_nutricionista = id_usuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PESO_POR_ID_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PESO_POR_ID_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PESO_POR_ID_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT id_peso,fid_alumno,fecha_registro,peso_actual 
    FROM peso WHERE estado = 1 AND fid_alumno LIKE CONCAT('%',_fid_alumno,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PLANALIMENTARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PLANALIMENTARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PLANALIMENTARIO`(
	IN _fecha DATETIME,
	IN _fid_alumno INT,
	IN _fid_nutricionista INT
)
BEGIN
	SELECT *
    FROM planAlimentario
    WHERE estado = 1
		AND fecha = _fecha
		AND fid_alumno = _fid_alumno
		AND fid_nutricionista = _fid_nutricionista;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PLAN_ALIMENTARIO_NOMBRERECETAS_PORIDYFECHA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PLAN_ALIMENTARIO_NOMBRERECETAS_PORIDYFECHA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PLAN_ALIMENTARIO_NOMBRERECETAS_PORIDYFECHA`(
	IN _id_alumno INT,
    IN _fecha DATETIME    
    )
BEGIN
	select fecha, fid_alumno, tipoComida, dia,  re.nombre as nombre from planalimentario pa inner join presetreceta pr
	on pa.fid_presetReceta = pr.id_presetReceta inner join receta_has_presetreceta rhp
	on pr.id_presetReceta = rhp.fid_presetReceta inner join receta re
	on rhp.fid_receta = re.id_receta
	where fid_alumno = _id_alumno and date(fecha) <= date(_fecha)
	and dayofweek(_fecha) = (dia+1)    
	order by fecha desc, dia asc, tipoComida asc
    limit 5;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PLAN_ALIMENTICIO_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PLAN_ALIMENTICIO_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PLAN_ALIMENTICIO_ALUMNO`(
	IN _fid_alumno INT
)
BEGIN
	SELECT id_presetReceta,nombre,kcalTotales,fecha,tipoComida,fid_nutricionista,dia 
    FROM planAlimentario INNER JOIN presetReceta 
    ON id_presetReceta=fid_presetReceta
    WHERE
		fid_alumno = _fid_alumno AND
		planAlimentario.estado = 1
	ORDER BY dia, tipoComida;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PRESETRECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PRESETRECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PRESETRECETA`()
BEGIN
	# Angel: agregada restricción estado
	SELECT * FROM presetReceta WHERE estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PRESETRECETA_X_TIPO_COMIDA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PRESETRECETA_X_TIPO_COMIDA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PRESETRECETA_X_TIPO_COMIDA`(
	IN _tipo INT
)
BEGIN
	SELECT i.id_presetReceta,i.nombre,i.kcalTotales
    FROM presetreceta i
    INNER JOIN receta_has_presetreceta j ON  j.fid_presetReceta = i.id_presetReceta 
    INNER JOIN receta m ON m.id_receta = j.fid_receta
    WHERE m.tipo=_tipo and m.estado = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PRESET_RECETAS_DE_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PRESET_RECETAS_DE_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PRESET_RECETAS_DE_RECETA`(
	IN _id_Receta INT
)
BEGIN
	select p.id_presetReceta,p.nombre,p.kcalTotales from receta_has_PresetReceta r
	INNER JOIN presetReceta p ON r.fid_presetReceta=p.id_presetReceta where r.fid_receta=_id_Receta;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_PSICOLOGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_PSICOLOGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_PSICOLOGO`()
BEGIN
                SELECT * FROM usuario u INNER JOIN especialista e ON
                u.id_usuario = e.id_especialista and u.estado = 1 INNER JOIN especialistaSalud es ON
                e.id_especialista = es.id_especialistaSalud INNER JOIN psicologo p ON
                es.id_especialistaSalud = p.id_psicologo;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_RECETAS
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_RECETAS`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_RECETAS`(
)
BEGIN
	# Angel: agregada restricción estado
	SELECT  id_receta,nombre FROM receta WHERE estado=1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_REGLA`()
BEGIN
	SELECT *
    FROM
		regla
    WHERE
		estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ROL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ROL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ROL`()
BEGIN
	SELECT *
    FROM
		rol
    WHERE
		estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_ROL_HAS_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_ROL_HAS_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_ROL_HAS_REGLA`(
	IN _fid_rol int
)
BEGIN
	SELECT re.*
    FROM
		rol_has_regla rhr, regla re
    WHERE
		rhr.estado = 1
        AND rhr.fid_rol = _fid_rol
        AND re.id_regla = rhr.fid_regla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_SESIONACTIVA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_SESIONACTIVA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_SESIONACTIVA`(
	IN _id_usuario INT
)
BEGIN
	SELECT id_sesionActiva, descripcion, fechaHoraInicio
    FROM
		sesionActiva
    WHERE
        fid_usuario = _id_usuario AND
		valida = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_TALLER
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_TALLER`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_TALLER`()
BEGIN
	SELECT * FROM taller.ta WHERE ta.estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_TIPO_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_TIPO_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_TIPO_DEPORTE`(
)
BEGIN
	SELECT id_tipoDeporte,nombre,descripcion FROM tipoDeporte where estado=1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_TOKEN
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_TOKEN`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_TOKEN`()
BEGIN
	SELECT *
    FROM
		token
    WHERE
		valido = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LISTAR_USUARIOS_POR_ESTADO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`LISTAR_USUARIOS_POR_ESTADO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `LISTAR_USUARIOS_POR_ESTADO`(
	IN _nombre VARCHAR(40),
	IN _estado TINYINT
)
BEGIN
	IF _estado > 50 THEN
		SELECT * FROM usuario
        WHERE
        (
        CONCAT(nombres," ", apellidos) LIKE CONCAT('%',_nombre,'%') OR
        CONCAT(apellidos," ", nombres) LIKE CONCAT('%',_nombre,'%') OR
        CONVERT(codigoPUCP, CHAR) LIKE CONCAT('%',_nombre,'%')
        )
        AND
        (
			fid_rol = 1 OR
            fid_rol = 2
        )
        AND
        (
			estado = 1 OR
            estado = 3
        )
        ORDER by apellidos;
	ELSEIF _estado < 0 THEN
		SELECT * FROM usuario
        WHERE
        (
        CONCAT(nombres," ", apellidos) LIKE CONCAT('%',_nombre,'%') OR
        CONCAT(apellidos," ", nombres) LIKE CONCAT('%',_nombre,'%') OR
        CONVERT(codigoPUCP, CHAR) LIKE CONCAT('%',_nombre,'%')
        )
        AND
        (
			fid_rol = 1 OR
            fid_rol = 2
        )
        ORDER by apellidos;
	ELSE
		SELECT * FROM usuario
        WHERE estado = _estado AND
        (
        CONCAT(nombres," ", apellidos) LIKE CONCAT('%',_nombre,'%') OR
        CONCAT(apellidos," ", nombres) LIKE CONCAT('%',_nombre,'%') OR
        CONVERT(codigoPUCP, CHAR) LIKE CONCAT('%',_nombre,'%')
        )
        AND
        (
			fid_rol = 1 OR
            fid_rol = 2
        )
        ORDER by apellidos;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MENSAJE_POR_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MENSAJE_POR_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MENSAJE_POR_ID`(IN _id_especialista INT)
BEGIN
	SELECT tituloMensaje, mensajeMensaje
    FROM pucpsaludable.especialista 
    WHERE mensajeMensaje != "" AND
    id_especialista = _id_especialista;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ALIMENTO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ALIMENTO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ALIMENTO`(
	IN _fid_alumno INT,
	IN _fid_ingrediente INT,
	IN _preferencia INT
)
BEGIN
	UPDATE alimento SET preferencia=_preferencia
    WHERE fid_alumno = _fid_alumno AND fid_ingrediente = _fid_ingrediente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ALUMNO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ALUMNO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ALUMNO`(
                IN _id_usuario INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(256),
                IN _nombres VARCHAR(40),
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _emailPersonal VARCHAR(256),    
                IN _telefonoMovil VARCHAR(9),                 
                IN _fechaNacimiento DATE,
                IN _sexo CHAR(1),
                IN _estado TINYINT,
				IN _fid_especialidad INT,
                IN _creditosAprobados DOUBLE,
                IN _matriculado TINYINT,
                IN _nombreContacto VARCHAR(45),
                IN _parentezcoContacto VARCHAR(45),
                IN _numContacto VARCHAR(9),
                IN _fotoSrc LONGBLOB
            )
BEGIN
                UPDATE usuario
                    SET codigoPUCP = _codigoPUCP,
                    contrasena = _contrasena,
                    nombres= _nombres,
                    apellidos = _apellidos,
                    emailPUCP = _emailPUCP,
                    emailPersonal = _emailPersonal,
                    telefonoMovil = _telefonoMovil,
                    fechaNacimiento = _fechaNacimiento,
                    sexo = _sexo,
                    estado = _estado,
                    fotoSrc = _fotoSrc
                    WHERE id_usuario = _id_usuario;
                UPDATE alumno
                    SET fid_especialidad= _fid_especialidad,
                    creditosAprobados= _creditosAprobados,
                    matriculado= _matriculado,
                    nombreContacto= _nombreContacto,
                    parentezcoContacto= _parentezcoContacto,
                    numContacto= _numContacto
                    WHERE id_alumno = _id_usuario;         
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_CITA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_CITA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_CITA`(
	IN _id_cita INT,
	IN _fid_alumno INT,
	IN _fid_especialista INT,
	IN _estado TINYINT,
	IN _fechaHoraRegistro DATE,
	IN _fechaHoraAtencion DATE,
	IN _diagnostico MEDIUMTEXT,
	IN _referencia VARCHAR(6),
	IN _atencion TINYINT	
)
BEGIN
	UPDATE cita
		SET fid_alumno= _fid_alumno,
		fid_especialistaSalud = _fid_especialista,
		estado = _estado,
		fechaHoraRegistro = _fechaHoraRegistro,
		fechaHoraAtencion = _fechaHoraAtencion,
		diagnostico = _diagnostico,
		referencia = _referencia,
		atencion = _atencion
		WHERE id_cita = _id_cita;     
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_CUMPLIMIENTO_RUTINA_ALIMENTARIA`(
            IN _id_cumplimientoRutina int(10),            
            IN _cumplio TINYINT
            )
BEGIN
                
                UPDATE cumplimientoRutina
                    SET cumplio = _cumplio
                    WHERE id_cumplimientoRutina = _id_cumplimientoRutina 
                    AND estado = 1;
                    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_DEPORTE`(
	IN _id_deporte INT,
    IN _fid_tipoDeporte INT,
    IN _nombre varchar(40)
)
BEGIN
	UPDATE deporte
    SET fid_tipoDeporte = _fid_tipoDeporte,
    nombre = _nombre
    WHERE id_deporte = _id_deporte;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ENTRENADOR
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ENTRENADOR`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ENTRENADOR`(
                IN _id_usuario INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(25),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _emailPersonal VARCHAR(256),    
                IN _telefonoMovil VARCHAR(9),                 
                IN _fechaNacimiento DATE,    
                IN _fotoSrc BLOB,
                IN _sexo CHAR(1),
                IN _estado TINYINT,
            
                
                IN _biografia TINYTEXT,
                IN _telefonoLaboral VARCHAR(9),                
                IN _direccionLaboral VARCHAR(100),   
            
                IN _fid_deporte INT(10)
            )
BEGIN
                UPDATE usuario
                    SET codigoPUCP = _codigoPUCP,
                    contrasena = _contrasena,
                    nombres= _nombres,
                    apellidos = _apellidos,
                    emailPUCP = _emailPUCP,
                    emailPersonal = _emailPersonal,
                    telefonoMovil = _telefonoMovil,
                    fechaNacimiento = _fechaNacimiento,
                    fotoSrc = _fotoSrc,
                    sexo = _sexo,
                    estado = _estado
                    WHERE id_usuario = _id_usuario;
                UPDATE especialista
                    SET biografia= _biografia,
                    telefonoLaboral= _telefonoLaboral,
                    direccionLaboral= _direccionLaboral                    
                    WHERE id_especialista = _id_usuario;
                UPDATE entrenador
                    SET fid_deporte = _fid_deporte
                    WHERE id_entrenador = _id_usuario;
            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ESTADO_USUARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ESTADO_USUARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ESTADO_USUARIO`(
	IN _id_usuario INT,
    IN _estado TINYINT
)
BEGIN
	UPDATE usuario SET estado = _estado WHERE id_usuario = _id_usuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_HORARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_HORARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_HORARIO`(
	IN _id_horario INT,
	IN _fid_taller INT,
	IN _fid_especialista INT,
	IN _horaInicio DATE,
	IN _horaFin DATE,
	IN _diaSemana INT,
	IN _fechaHoraRegistro DATE,
	IN _estado TINYINT
)
BEGIN
	UPDATE horario
		SET fid_taller= _fid_taller,
		fid_especialistaSalud = _fid_especialista,
		horaInicio = _horaInicio,
		horaFin = _horaFin,
		diaSemana = _diaSemana,
		fechaHoraRegistro = _fechaHoraRegistro,
		estado = _estado
		WHERE id_horario = _id_horario;       
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_HORARIO_HABITUAL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_HORARIO_HABITUAL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_HORARIO_HABITUAL`(
	IN _fid_alumno INT,
    IN _despertarse	TIME,
	IN _acostarse	TIME,
	IN _desayuno	TIME,
	IN _mediaManana	TIME,
	IN _comida	TIME,
	IN _merienda	TIME,
	IN _cena	TIME
)
BEGIN
	UPDATE horariohabitual SET despertarse=_despertarse,acostarse=_acostarse,desayuno=_desayuno,mediaManana=_mediaManana,
	comida=_comida,merienda=_merienda,cena=_cena
    WHERE fid_alumno = _fid_alumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_HORAS_SUENO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_HORAS_SUENO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_HORAS_SUENO`(
	IN _id_horas_sueno INT,
    IN _fid_alumno INT,
	IN _fecha DATE,
    IN _horas DOUBLE(8,2)
)
BEGIN
	UPDATE horasSueno SET fecha=_fecha,horas=_horas
    WHERE id_horas_sueno = _id_horas_sueno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_INDICADOR_ANTROPOMETRICO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_INDICADOR_ANTROPOMETRICO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_INDICADOR_ANTROPOMETRICO`(
	IN _id_indicador_antropometrico INT,
	IN _fid_alumno INT,
    IN _peso_habitual DOUBLE,
    IN _estatura DOUBLE,
    IN _circunferencia_brazo DOUBLE,
    IN _circunferencia_cintura DOUBLE,
    IN _circunferencia_cadera DOUBLE,
    IN _circunferencia_abdominal DOUBLE,
    IN _fecha_registro DATE
)
BEGIN
	UPDATE indicadorAntropometrico SET peso_actual=_peso_habitual,
    estatura=_estatura,circunferencia_brazo=_circunferencia_brazo,
    circunferencia_cintura=_circunferencia_cintura,
    circunferencia_cadera=_circunferencia_cadera,
    circunferencia_abdominal=_circunferencia_abdominal,
    fecha_registro=_fecha_registro
    WHERE id_indicador_antropometrico = _id_indicador_antropometrico;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_INDICADOR_SALUD
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_INDICADOR_SALUD`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_INDICADOR_SALUD`(
	IN _fid_alumno INT,
    IN _cafe	TINYINT,
	IN _alcohol	TINYINT,
	IN _tabaco	TINYINT,
	IN _laxantes	TINYINT,
	IN _diureticos	TINYINT,
	IN _antiacidos	TINYINT,
	IN _analgesicos	TINYINT,
	IN _anticonceptivos_orales	TINYINT,
	IN _terapia_hormonal	TINYINT,
	IN _diarrea	TINYINT,
	IN _celiaquia	TINYINT,
	IN _estrenimiento	TINYINT,
	IN _gastritis	TINYINT,
	IN _ulcera	TINYINT,
	IN _nausea	TINYINT,
	IN _pirosis	TINYINT,
	IN _vomito	TINYINT,
	IN _colitis	TINYINT,
	IN _dentadura	TINYINT,
	IN _sensibilidad_dental	TINYINT,
	IN _embarazo	TINYINT,
	IN _climaterio	TINYINT,
	IN _cirugias_previas	TINYTEXT,
	IN _aFObesidad	TINYINT,
	IN _aFDiabetes	TINYINT,
	IN _aFHTA	TINYINT,
	IN _aFCancer	TINYINT,
	IN _aFHipercolesterolemia	TINYINT,
	IN _aFHipertrigliceridemia	TINYINT,
	IN _alergiasMed VARCHAR(100)
)
BEGIN
	UPDATE indicadorsalud SET cafe=_cafe,alcohol=_alcohol,tabaco=_tabaco,laxantes=_laxantes,diureticos=_diureticos,antiacidos=_antiacidos,
	analgesicos=_analgesicos,anticonceptivosOrales=_anticonceptivos_orales,terapiaHormonal=_terapia_hormonal,diarrea=_diarrea,celiaquia=_celiaquia,
	estrenimiento=_estrenimiento,gastritis=_gastritis,ulcera=_ulcera,nausea=_nausea,pirosis=_pirosis,vomito=_vomito,colitis=_colitis,dentadura=_dentadura,
	sensibilidadDental=_sensibilidad_dental,embarazo=_embarazo,climaterio=_climaterio,cirugiasPrevias=_cirugias_previas,aFObesidad=_aFObesidad,aFDiabetes=_aFDiabetes,
	aFHTA=_aFHTA,aFCancer=_aFCancer,aFHipercolesterolemia=_aFHipercolesterolemia,aFHipertrigliceridemia=_aFHipertrigliceridemia,alergiasMed=_alergiasMed
    WHERE fid_alumno = _fid_alumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_INGREDIENTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_INGREDIENTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_INGREDIENTE`(
    IN _id_ingrediente INT,
    IN _nombre VARCHAR(40),
    IN _unidad VARCHAR(10),
    IN _cantidad DOUBLE,
    IN _kcal DOUBLE,
    IN _grasasSaturadas TINYINT,
    IN _azucar TINYINT,
    IN _sodio TINYINT,
    IN _grasasTrans TINYINT
)
BEGIN
	UPDATE ingrediente
    # Angel: corregido, estado = estado quitado
    SET nombre = _nombre, unidad=_unidad,cantidad=_cantidad,kcal=_kcal,grasasSaturadas=_grasasSaturadas,
    azucar=_azucar,sodio=_sodio,grasasTrans=_grasasTrans
	WHERE id_ingrediente = _id_ingrediente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_NUTRICIONISTA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_NUTRICIONISTA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_NUTRICIONISTA`(
                IN _id_usuario INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(256),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _emailPersonal VARCHAR(256),    
                IN _telefonoMovil VARCHAR(9),                 
                IN _fechaNacimiento DATE,    
                IN _fotoSrc BLOB,
                IN _sexo CHAR(1),
                IN _estado TINYINT,            
                
                IN _biografia TINYTEXT,
                IN _telefonoLaboral VARCHAR(9),                
                IN _direccionLaboral VARCHAR(100),   
            
                IN _colegiatura VARCHAR(45)
            )
BEGIN
                UPDATE usuario
                    SET codigoPUCP = _codigoPUCP,
                    contrasena = _contrasena,
                    nombres= _nombres,
                    apellidos = _apellidos,
                    emailPUCP = _emailPUCP,
                    emailPersonal = _emailPersonal,
                    telefonoMovil = _telefonoMovil,
                    fechaNacimiento = _fechaNacimiento,
                    fotoSrc = _fotoSrc,
                    sexo = _sexo,
                    estado = _estado
                    WHERE id_usuario = _id_usuario;
                UPDATE especialista
                    SET biografia= _biografia,
                    telefonoLaboral= _telefonoLaboral,
                    direccionLaboral= _direccionLaboral                    
                    WHERE id_especialista = _id_usuario;
                UPDATE especialistaSalud
                    SET colegiatura = _colegiatura
                    WHERE id_especialistaSalud = _id_usuario;

            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_PESO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_PESO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_PESO`(
	IN _id_peso INT,
    IN _fid_alumno INT,
	IN _fecha_registro DATE,
    IN _peso_actual DOUBLE(4,2)
)
BEGIN
	UPDATE peso SET _fecha_registro=_fecha_registro,peso_actual=_peso_actual
    WHERE id_peso = _id_peso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_PLANALIMENTARIO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_PLANALIMENTARIO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_PLANALIMENTARIO`(
	IN _fid_alumno INT,
	IN _fid_presetReceta INT,
	IN _fid_nutricionista INT,
	IN _tipoComida TINYINT,
	IN _dia TINYINT
)
BEGIN
-- MODIFICADO, DEBE VERIFICAR DIA TIPOCOMIDA NUTRI ALUM Y MODIFICAR SOLO PRESET Y FECHA
	UPDATE planAlimentario
    SET
		fid_presetReceta = _fid_presetReceta,
        fecha = CURRENT_TIMESTAMP
    WHERE  fid_alumno = _fid_alumno
		AND fid_nutricionista = _fid_nutricionista
        AND dia = _dia
        AND tipoComida = _tipoComida;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_PRESETRECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_PRESETRECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_PRESETRECETA`(
	IN _id_preseReceta INT,
    IN _nombre VARCHAR(40),
    IN _kcalTotales DOUBLE
    
)
BEGIN
	UPDATE presetReceta
    SET nombre=_nombre,kcalTotales=_kcalTotales
    WHERE id_presetTeceta=_id_presetTeceta;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_PSICOLOGO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_PSICOLOGO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_PSICOLOGO`(
                IN _id_usuario INT,
                IN _codigoPUCP VARCHAR(8),
                IN _contrasena VARCHAR(25),
                IN _nombres VARCHAR(40),                
                IN _apellidos VARCHAR(40),
                IN _emailPUCP VARCHAR(256),                             
                IN _emailPersonal VARCHAR(256),    
                IN _telefonoMovil VARCHAR(9),                 
                IN _fechaNacimiento DATE,    
                IN _fotoSrc BLOB,
                IN _sexo CHAR(1),
                IN _estado TINYINT,            
                
                IN _biografia TINYTEXT,
                IN _telefonoLaboral VARCHAR(9),                
                IN _direccionLaboral VARCHAR(100),   
            
                IN _colegiatura VARCHAR(45)
            )
BEGIN
                UPDATE usuario
                    SET codigoPUCP = _codigoPUCP,
                    contrasena = _contrasena,
                    nombres= _nombres,
                    apellidos = _apellidos,
                    emailPUCP = _emailPUCP,
                    emailPersonal = _emailPersonal,
                    telefonoMovil = _telefonoMovil,
                    fechaNacimiento = _fechaNacimiento,
                    fotoSrc = _fotoSrc,
                    sexo = _sexo,
                    estado = _estado
                    WHERE id_usuario = _id_usuario;
                UPDATE especialista
                    SET biografia= _biografia,
                    telefonoLaboral= _telefonoLaboral,
                    direccionLaboral= _direccionLaboral                    
                    WHERE id_especialista = _id_usuario;
                UPDATE especialistaSalud
                    SET colegiatura = _colegiatura
                    WHERE id_especialistaSalud = _id_usuario;

            END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_RECETA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_RECETA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_RECETA`(
	IN _id_receta INT,
    IN _nombre VARCHAR(40),
    IN _descripcion MEDIUMTEXT,
    IN _indicaciones MEDIUMTEXT,
    IN _tipo TINYINT
)
BEGIN
	UPDATE receta
    # Angel: agregado tipo
    SET nombre=_nombre,descripcion=_descripcion,indicaciones=_indicaciones,tipo=_tipo
    WHERE id_receta=_id_receta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_REGLA`(
	IN _id_regla int,
    IN _nombre varchar(40),
    IN _clave int,
    IN _tipo int
)
BEGIN
	UPDATE regla
    SET
		nombre = _nombre,
		clave = _clave,
		tipo = _tipo
    WHERE
		id_regla = _id_regla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ROL
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ROL`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ROL`(
	IN _id_rol int,
    IN _nombre varchar(40)
)
BEGIN
	UPDATE rol
    SET
		nombre = _nombre
    WHERE
		id_rol = _id_rol;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_ROL_HAS_REGLA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_ROL_HAS_REGLA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_ROL_HAS_REGLA`(
	IN _fid_rol int,
	IN _fid_regla int
)
BEGIN
	DELETE FROM rol_has_regla
	WHERE fid_rol = _fid_rol;
    CALL INSERTAR_ROL_HAS_REGLA(_fid_rol, _fid_regla);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_SESIONACTIVA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_SESIONACTIVA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_SESIONACTIVA`(
	IN _id_sesionActiva int,
	IN _fid_usuario int,
	IN _descripcion varchar(120),
	IN _fechaHoraInicio datetime
)
BEGIN
	UPDATE sesionActiva
    SET
		fid_usuario = _fid_usuario,
		descripcion = _descripcion,
		fechaHoraInicio = _fechaHoraInicio
    WHERE
		id_sesionActiva = _id_sesionActiva;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_TALLER
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_TALLER`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_TALLER`(
	IN _id_taller INT,
	IN _fid_deporte INT,
	IN _nombre VARCHAR(100),
	IN _fechaInicio DATE,
	IN _fechaFin DATE,
	IN _lugar VARCHAR(100),
	IN _estado TINYINT,
	IN _capacidad INT
)
BEGIN
	UPDATE taller
		SET fid_deporte= _fid_deporte,
		fid_especialistaSalud = _fid_especialista,
		horaInicio = _horaInicio,
		horaFin = _horaFin,
		diaSemana = _diaSemana,
		fechaHoraRegistro = _fechaHoraRegistro,
		estado = _estado,
		capacidad = _capacidad
		WHERE id_taller = _id_taller;       
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_TIPO_DEPORTE
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_TIPO_DEPORTE`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_TIPO_DEPORTE`(
	IN _id_tipoDeporte INT,
    IN _nombre varchar(40),
    IN _descripcion tinytext
)
BEGIN
	UPDATE tipoDeporte
    SET nombre = _nombre,
    descripcion = _descripcion
    WHERE id_tipoDeporte = _id_tipoDeporte;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MODIFICAR_TOKEN
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`MODIFICAR_TOKEN`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `MODIFICAR_TOKEN`(
	IN _id_token int,
	IN _codigo varchar(8),
	IN _fechaHora datetime
)
BEGIN
	UPDATE token
    SET
		codigo = _codigo,
		fechaHora = _fechaHora
    WHERE
		id_token = _id_token;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VERIFICAR_SESIONACTIVA
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`VERIFICAR_SESIONACTIVA`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `VERIFICAR_SESIONACTIVA`(
	IN _id_sesionactiva int,
	OUT _id_usuario int,
	OUT _rol varchar(40)
)
BEGIN
	DECLARE var_done INT DEFAULT FALSE;
	DECLARE var_fid_usuario INT;
	DECLARE var_rol VARCHAR(40);
	DECLARE obtenerRegistro CURSOR FOR
    SELECT
		sa.`fid_usuario`,
		ro.`nombre`
	FROM
		usuario us,
		sesionactiva sa,
		rol ro
	WHERE
		sa.id_sesionactiva = _id_sesionactiva AND
		us.id_usuario = sa.fid_usuario AND
		ro.id_rol = us.fid_rol AND
		valida = 1
	ORDER BY id_sesionactiva DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_done = TRUE;

	OPEN obtenerRegistro;
		FETCH obtenerRegistro INTO var_fid_usuario, var_rol;
	CLOSE obtenerRegistro;
    # Sesión no válida
	IF var_done = 1 THEN
		SET _id_usuario = 0;
        SET _rol = "null";
	# Sesión válida
	ELSE
		SET _id_usuario = var_fid_usuario;
        SET _rol = var_rol;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VERIFICAR_USUARIOREGISTRADO
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`VERIFICAR_USUARIOREGISTRADO`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `VERIFICAR_USUARIOREGISTRADO`(
	OUT _id_usuario TINYINT,
    IN _codigoPUCP VARCHAR(8)
)
BEGIN
	DECLARE var_id_usuario INT;
    DECLARE var_done INT DEFAULT FALSE;
    DECLARE obtenerRegistro CURSOR FOR SELECT id_usuario FROM usuario WHERE estado = 1 AND codigoPUCP = _codigoPUCP;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_done = true;
    OPEN obtenerRegistro;
    FETCH obtenerRegistro INTO var_id_usuario;
    CLOSE obtenerRegistro;
    # No registrado
    IF var_done = 1 THEN
		SET _id_usuario = 0;
    # Registrado
    ELSE
		SET _id_usuario = var_id_usuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VIDEO_POR_ID
-- -----------------------------------------------------

USE `pucpsaludable`;
DROP procedure IF EXISTS `pucpsaludable`.`VIDEO_POR_ID`;

DELIMITER $$
USE `pucpsaludable`$$
CREATE DEFINER=`standard`@`%` PROCEDURE `VIDEO_POR_ID`(IN _id_especialista INT)
BEGIN
	SELECT URLVideoInformativo FROM pucpsaludable.especialista 
    WHERE URLVideoInformativo != "" AND
    id_especialista = _id_especialista;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
